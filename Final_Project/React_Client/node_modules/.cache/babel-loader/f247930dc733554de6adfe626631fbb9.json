{"ast":null,"code":"var _jsxFileName = \"/Users/Sveta/Documents/Full_stack/Final Project/React_Client/src/Components/AllMoviesComponent.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport { useState } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { getAllMovies } from \"../DALs/MoviesDAL\";\nimport { searchMovies } from \"../Utils/Movies_Utils\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function AllMoviesComp() {\n  _s();\n\n  const [StartMovies, setStartMovies] = useState(); //startMovies - movies on starting\n\n  const [SearchInput, setSearchInput] = useState();\n  const [SearchedMovies, setSearchedMovies] = useState(); //on searching\n\n  const state = useSelector(state => state);\n  const dispatch = useDispatch(); //Loading all the starting movies before any search was made:\n\n  useEffect(async () => {\n    const movies = await getAllMovies();\n    setStartMovies(movies); // Changing of state:setStartMovies(movies)--->all movies from data\n\n    setSearchedMovies(movies); //setSearchedMovies --->all movies from data\n  }, [state.refresh]); //before search\n  //Loading all the movies after searching for them:\n\n  useEffect(async () => {\n    setSearchedMovies(SearchedMovies); //setSearchedMovies --->all movies after searching\n  }, [state.refreshMovies]); //\"search\" is a function that uses a function from the utils to find all the wanted movies and update the \"allMovies\" function\n\n  const search = async () => {\n    const searchResult = searchMovies(StartMovies, SearchInput);\n    setSearchedMovies(searchResult);\n    dispatch({\n      type: 'REFRESH MOVIES'\n    });\n  }; //\"moviesLister\" is listing all the movies into the grid\n\n\n  const moviesLister = SearchedMovies === null || SearchedMovies === void 0 ? void 0 : SearchedMovies.map((movie, index) => /*#__PURE__*/_jsxDEV(SeperateMovieComp, {\n    movie: movie\n  }, index, false, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 64\n  }, this));\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"searchBar\",\n      children: [\"Find Movie: \", /*#__PURE__*/_jsxDEV(\"input\", {\n        className: \"searchInput\",\n        type: \"text\",\n        onChange: e => setSearchInput(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 29\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"editDeleteBtns\",\n        onClick: search,\n        children: \"Find\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 88\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"MoviesGrid\",\n      children: moviesLister\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 9\n  }, this);\n}\n\n_s(AllMoviesComp, \"2EBQoaz3u+6iaN5S+TUBhlZdQhQ=\", false, function () {\n  return [useSelector, useDispatch];\n});\n\n_c = AllMoviesComp;\n\nvar _c;\n\n$RefreshReg$(_c, \"AllMoviesComp\");","map":{"version":3,"sources":["/Users/Sveta/Documents/Full_stack/Final Project/React_Client/src/Components/AllMoviesComponent.js"],"names":["React","useState","useSelector","useDispatch","getAllMovies","searchMovies","AllMoviesComp","StartMovies","setStartMovies","SearchInput","setSearchInput","SearchedMovies","setSearchedMovies","state","dispatch","useEffect","movies","refresh","refreshMovies","search","searchResult","type","moviesLister","map","movie","index","e","target","value"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,QAAyB,OAAzB;AACA,SAASC,WAAT,EAAqBC,WAArB,QAAwC,aAAxC;AACA,SAASC,YAAT,QAA6B,mBAA7B;AACA,SAASC,YAAT,QAA6B,uBAA7B;;AAGA,eAAe,SAASC,aAAT,GAAyB;AAAA;;AAEpC,QAAM,CAACC,WAAD,EAAcC,cAAd,IAAgCP,QAAQ,EAA9C,CAFoC,CAEY;;AAChD,QAAM,CAACQ,WAAD,EAAcC,cAAd,IAAgCT,QAAQ,EAA9C;AACA,QAAM,CAACU,cAAD,EAAiBC,iBAAjB,IAAsCX,QAAQ,EAApD,CAJoC,CAIkB;;AACtD,QAAMY,KAAK,GAAGX,WAAW,CAACW,KAAK,IAAIA,KAAV,CAAzB;AACA,QAAMC,QAAQ,GAAGX,WAAW,EAA5B,CANoC,CAQpC;;AACAY,EAAAA,SAAS,CAAC,YAAY;AAClB,UAAMC,MAAM,GAAG,MAAMZ,YAAY,EAAjC;AACAI,IAAAA,cAAc,CAACQ,MAAD,CAAd,CAFkB,CAEI;;AACtBJ,IAAAA,iBAAiB,CAACI,MAAD,CAAjB,CAHkB,CAGO;AAC5B,GAJQ,EAIN,CAACH,KAAK,CAACI,OAAP,CAJM,CAAT,CAToC,CAajB;AAEnB;;AACAF,EAAAA,SAAS,CAAC,YAAY;AAClBH,IAAAA,iBAAiB,CAACD,cAAD,CAAjB,CADkB,CACe;AACpC,GAFQ,EAEN,CAACE,KAAK,CAACK,aAAP,CAFM,CAAT,CAhBoC,CAoBpC;;AACA,QAAMC,MAAM,GAAG,YAAY;AACvB,UAAMC,YAAY,GAAGf,YAAY,CAACE,WAAD,EAAcE,WAAd,CAAjC;AACAG,IAAAA,iBAAiB,CAACQ,YAAD,CAAjB;AACAN,IAAAA,QAAQ,CAAC;AAAEO,MAAAA,IAAI,EAAE;AAAR,KAAD,CAAR;AACH,GAJD,CArBoC,CA2BpC;;;AACA,QAAMC,YAAY,GAAGX,cAAH,aAAGA,cAAH,uBAAGA,cAAc,CAAEY,GAAhB,CAAoB,CAACC,KAAD,EAAQC,KAAR,kBAAkB,QAAC,iBAAD;AAAmB,IAAA,KAAK,EAAED;AAA1B,KAAsCC,KAAtC;AAAA;AAAA;AAAA;AAAA,UAAtC,CAArB;AAEA,sBACI;AAAA,4BACI;AAAK,MAAA,SAAS,EAAC,WAAf;AAAA,8CACgB;AAAO,QAAA,SAAS,EAAC,aAAjB;AAA+B,QAAA,IAAI,EAAC,MAApC;AAA2C,QAAA,QAAQ,EAAEC,CAAC,IAAIhB,cAAc,CAACgB,CAAC,CAACC,MAAF,CAASC,KAAV;AAAxE;AAAA;AAAA;AAAA;AAAA,cADhB,eAEI;AAAQ,QAAA,SAAS,EAAC,gBAAlB;AAAmC,QAAA,OAAO,EAAET,MAA5C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,eAG+E;AAAA;AAAA;AAAA;AAAA,YAH/E,eAII;AAAK,MAAA,SAAS,EAAC,YAAf;AAAA,gBACKG;AADL;AAAA;AAAA;AAAA;AAAA,YAJJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAUH;;GAxCuBhB,a;UAKNJ,W,EACGC,W;;;KANGG,a","sourcesContent":["import React from \"react\"\nimport { useState } from \"react\"\nimport { useSelector,useDispatch } from \"react-redux\"\nimport { getAllMovies } from \"../DALs/MoviesDAL\"\nimport { searchMovies } from \"../Utils/Movies_Utils\"\n\n\nexport default function AllMoviesComp() { \n    \n    const [StartMovies, setStartMovies] = useState()//startMovies - movies on starting\n    const [SearchInput, setSearchInput] = useState()\n    const [SearchedMovies, setSearchedMovies] = useState()//on searching\n    const state = useSelector(state => state)\n    const dispatch = useDispatch()\n    \n    //Loading all the starting movies before any search was made:\n    useEffect(async () => {\n        const movies = await getAllMovies()\n        setStartMovies(movies)// Changing of state:setStartMovies(movies)--->all movies from data\n        setSearchedMovies(movies)//setSearchedMovies --->all movies from data\n    }, [state.refresh])//before search\n\n    //Loading all the movies after searching for them:\n    useEffect(async () => {\n        setSearchedMovies(SearchedMovies)//setSearchedMovies --->all movies after searching\n    }, [state.refreshMovies])\n\n    //\"search\" is a function that uses a function from the utils to find all the wanted movies and update the \"allMovies\" function\n    const search = async () => {\n        const searchResult = searchMovies(StartMovies, SearchInput)\n        setSearchedMovies(searchResult);\n        dispatch({ type: 'REFRESH MOVIES' })\n    }\n\n    //\"moviesLister\" is listing all the movies into the grid\n    const moviesLister = SearchedMovies?.map((movie, index) => <SeperateMovieComp movie={movie} key={index} />)\n    \n    return (\n        <div>\n            <div className='searchBar'>\n                Find Movie: <input className='searchInput' type='text' onChange={e => setSearchInput(e.target.value)} />\n                <button className='editDeleteBtns' onClick={search}>Find</button></div><br />\n            <div className='MoviesGrid'>\n                {moviesLister}\n            </div>\n        </div>\n    )\n}"]},"metadata":{},"sourceType":"module"}