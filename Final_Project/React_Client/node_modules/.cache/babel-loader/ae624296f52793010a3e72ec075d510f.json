{"ast":null,"code":"var _jsxFileName = \"/Users/Sveta/Documents/Full_stack/Final Project/React_Client/src/Components/MovieSubscribeComponent.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { getAllMovies } from '../DALs/MoviesDAL';\nimport { findDontWatchedMovies } from '../Utils/Movies_Utils';\nimport { addMovieToSubscriptions, getSubscriptionsByMemberId } from '../Utils/Subscriptions_Utils';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function MovieSubscribeComp(props) {\n  _s();\n\n  //states:\n  const [movies, setMovies] = useState();\n  const [movie, setMovie] = useState();\n  const [date, setDate] = useState();\n  const [id, setId] = useState();\n  const [boolean, setBoolean] = useState(true); //if movie is first--->true\n  //every time the function is loading and gets differnt \"props.show\" value the function is loading all the movies that the member didnt wathed into the select element\n\n  useEffect(async () => {\n    const allMovies = await getAllMovies(); //all movies from DB\n\n    const subscription = await getSubscriptionsByMemberId(props.id); //subscriptions of member\n\n    const watchedMovies = subscription === null || subscription === void 0 ? void 0 : subscription.movies;\n    let restMovies = [];\n\n    if (watchedMovies !== undefined) {\n      setBoolean(false);\n      restMovies = await findDontWatchedMovies(watchedMovies);\n      setMovies(restMovies);\n    } else {\n      setMovies(allMovies); //if the member didn't watch any movies that load all the movies \n\n      setBoolean(true);\n    }\n\n    setId(props.id);\n  }, [props.show]); //Adding the choosen movie to the member's \"movie\" array after validation of the inputs:\n\n  const subscribeMovie = async () => {\n    const inputMovie = {\n      movieId: movie,\n      date: date\n    };\n\n    if (movie !== undefined && date !== undefined) {\n      if (boolean) {\n        props.cb();\n        await addMovieToSubscriptions(id, inputMovie);\n      } else {\n        await addMovieToSubscriptions(id, inputMovie);\n        props.cb();\n      }\n    } else if (movie !== undefined) alert('Please Enter Date');else alert('Please Choose Movie');\n  }; //Listing all the options to the select element constaining all the movies that the member didn't watch\n\n\n  const movieLister = movies === null || movies === void 0 ? void 0 : movies.map((movie, index) => /*#__PURE__*/_jsxDEV(\"option\", {\n    value: movie._id,\n    children: movie.name\n  }, index, false, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 55\n  }, this));\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"subAddNewMovieDiv\",\n    children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n      className: \"whiteH4\",\n      children: \"Add A New Movie\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n      style: {\n        background: \"grey\"\n      },\n      onChange: e => setMovie(e.target.value),\n      children: [/*#__PURE__*/_jsxDEV(\"option\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 17\n      }, this), movieLister]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 22\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 27\n    }, this), \"Date: \", /*#__PURE__*/_jsxDEV(\"input\", {\n      style: {\n        background: \"grey\"\n      },\n      type: \"date\",\n      onChange: e => setDate(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 19\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 108\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 113\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"yellowButton3\",\n      onClick: subscribeMovie,\n      children: \"Subscribe\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 9\n  }, this);\n}\n\n_s(MovieSubscribeComp, \"mjzC5T7FyURGuog9kR/UWh0qicI=\");\n\n_c = MovieSubscribeComp;\n\nvar _c;\n\n$RefreshReg$(_c, \"MovieSubscribeComp\");","map":{"version":3,"sources":["/Users/Sveta/Documents/Full_stack/Final Project/React_Client/src/Components/MovieSubscribeComponent.js"],"names":["React","useEffect","useState","getAllMovies","findDontWatchedMovies","addMovieToSubscriptions","getSubscriptionsByMemberId","MovieSubscribeComp","props","movies","setMovies","movie","setMovie","date","setDate","id","setId","boolean","setBoolean","allMovies","subscription","watchedMovies","restMovies","undefined","show","subscribeMovie","inputMovie","movieId","cb","alert","movieLister","map","index","_id","name","background","e","target","value"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react'\nimport { getAllMovies } from '../DALs/MoviesDAL'\nimport { findDontWatchedMovies } from '../Utils/Movies_Utils'\nimport { addMovieToSubscriptions, getSubscriptionsByMemberId } from '../Utils/Subscriptions_Utils'\n\nexport default function MovieSubscribeComp(props){\n    //states:\n    const [movies, setMovies] = useState()\n    const [movie, setMovie] = useState()\n    const [date, setDate] = useState()\n    const [id, setId] = useState()\n    const [boolean, setBoolean] = useState(true)//if movie is first--->true\n\n    //every time the function is loading and gets differnt \"props.show\" value the function is loading all the movies that the member didnt wathed into the select element\n    useEffect(async () => {\n        const allMovies = await getAllMovies()//all movies from DB\n        const subscription = await getSubscriptionsByMemberId(props.id)//subscriptions of member\n        const watchedMovies = subscription?.movies\n        let restMovies = []\n        if (watchedMovies !== undefined) {\n            setBoolean(false)\n            restMovies = await findDontWatchedMovies(watchedMovies)\n            setMovies(restMovies)\n        } else {\n            setMovies(allMovies)//if the member didn't watch any movies that load all the movies \n            setBoolean(true)\n        }\n        setId(props.id)\n    }, [props.show])\n\n    //Adding the choosen movie to the member's \"movie\" array after validation of the inputs:\n    const subscribeMovie = async () => \n    {\n        const inputMovie = {\n            movieId: movie,\n            date: date\n        }\n        if ((movie !== undefined) && (date !== undefined)) \n        {\n            if (boolean) \n            {\n                props.cb()\n                await addMovieToSubscriptions(id, inputMovie)\n            } else {\n                await addMovieToSubscriptions(id, inputMovie)\n                props.cb()\n            }\n        }\n        else if (movie !== undefined)\n            alert('Please Enter Date')\n        else\n            alert('Please Choose Movie')\n    }\n\n\n    \n    //Listing all the options to the select element constaining all the movies that the member didn't watch\n    const movieLister = movies?.map((movie, index) => <option key={index} value={movie._id}>{movie.name}</option>)\n    return(\n        <div className='subAddNewMovieDiv'>\n            <h4 className='whiteH4'>Add A New Movie</h4>\n            <select style={{background:\"grey\"}} onChange={e => setMovie(e.target.value)}>\n                <option></option>\n                {movieLister}\n            </select><br/><br/>\n            Date: <input style={{background:\"grey\"}} type='date' onChange={e => setDate(e.target.value)} /><br/><br/>\n            <button className='yellowButton3' onClick={subscribeMovie}>Subscribe</button>\n        </div> : null\n    )\n}"]},"metadata":{},"sourceType":"module"}