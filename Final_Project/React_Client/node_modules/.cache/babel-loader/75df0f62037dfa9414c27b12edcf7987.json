{"ast":null,"code":"import { getAllUsers, getUserByID } from '../DALs/Users_DAL'; //Checks if the user exist:\n\nconst checkIfUserExist = async newuser => {\n  const allUsers = await getAllUsers(); //All users from server\n\n  console.log(allUsers.users); //check--->doing a check if new user equals with his name and password to user from users of server:\n\n  const check = allUsers.users.find(user => user.username === newuser.username && user.password === newuser.password);\n\n  if (check !== undefined) {\n    return true;\n  } else {\n    return false;\n  }\n}; //Finding Users Id by its username:\n\n\nconst findUserID = async username => {\n  const allUsers = await getAllUsers(); //All users from server\n\n  const user = allUsers.find(element => element.username === username); //finding specific user by its user name\n\n  if (user !== undefined) {\n    //if exist\n    return user._id; //valueOf() - for getting value of user id because it is object.\n  }\n}; //Finding and return a user by it's id:\n\n\nconst findUserByUserName = async username => {\n  const allUsers = await getAllUsers(); //All users from server\n\n  const user = allUsers.users.find(element => element.username.toUpperCase() === username.toUpperCase()); //finding specific user by its user name\n\n  const id = user._id; //id of this user\n\n  const foundUser = await getUserByID(id); //getUserByID from DAL , foundUser---> find data of user by id\n\n  return foundUser;\n}; //Checking if a username is allready exists:\n\n\nconst checkIfUsernameExist = async username => {\n  const users = (await getAllUsers()).users; //All users from server\n  //check--->doing a check if new user equals with his name to user from users of server:\n\n  const check = users.find(user => user.username.toUpperCase() === username.toUpperCase());\n\n  if (check !== undefined) {\n    return true;\n  } else {\n    return false;\n  }\n}; //Checking if a password is allready exist:\n\n\nconst checkIfPasswordExist = async id => {\n  const user = (await getUserByID(id)).user;\n\n  if (user.password !== '') {\n    return true;\n  } else {\n    return false;\n  }\n};\n\nexport { checkIfUserExist, findUserID, findUserByUserName, checkIfUsernameExist, checkIfPasswordExist };","map":{"version":3,"sources":["/Users/Sveta/Documents/Full_stack/Final Project/React_Client/src/Utils/Users_Utils.js"],"names":["getAllUsers","getUserByID","checkIfUserExist","newuser","allUsers","console","log","users","check","find","user","username","password","undefined","findUserID","element","_id","findUserByUserName","toUpperCase","id","foundUser","checkIfUsernameExist","checkIfPasswordExist"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,WAAtB,QAAyC,mBAAzC,C,CAEA;;AACA,MAAMC,gBAAgB,GAAG,MAAOC,OAAP,IAAmB;AACxC,QAAMC,QAAQ,GAAI,MAAMJ,WAAW,EAAnC,CADwC,CACF;;AACtCK,EAAAA,OAAO,CAACC,GAAR,CAAYF,QAAQ,CAACG,KAArB,EAFwC,CAGxC;;AACA,QAAMC,KAAK,GAAGJ,QAAQ,CAACG,KAAT,CAAeE,IAAf,CAAqBC,IAAD,IAAWA,IAAI,CAACC,QAAL,KAAkBR,OAAO,CAACQ,QAA3B,IAAyCD,IAAI,CAACE,QAAL,KAAkBT,OAAO,CAACS,QAAjG,CAAd;;AACA,MAAIJ,KAAK,KAAKK,SAAd,EAAwB;AACpB,WAAO,IAAP;AACH,GAFD,MAGI;AACA,WAAO,KAAP;AACH;AACJ,CAXD,C,CAaA;;;AACA,MAAMC,UAAU,GAAG,MAAOH,QAAP,IAAoB;AACnC,QAAMP,QAAQ,GAAI,MAAMJ,WAAW,EAAnC,CADmC,CACG;;AACtC,QAAMU,IAAI,GAAGN,QAAQ,CAACK,IAAT,CAAeM,OAAD,IAAaA,OAAO,CAACJ,QAAR,KAAqBA,QAAhD,CAAb,CAFmC,CAEmC;;AACtE,MAAID,IAAI,KAAKG,SAAb,EAAuB;AAAC;AACpB,WAAOH,IAAI,CAACM,GAAZ,CADmB,CACJ;AAClB;AACJ,CAND,C,CAQA;;;AACA,MAAMC,kBAAkB,GAAG,MAAON,QAAP,IAAoB;AAC3C,QAAMP,QAAQ,GAAG,MAAMJ,WAAW,EAAlC,CAD2C,CACP;;AACpC,QAAMU,IAAI,GAAGN,QAAQ,CAACG,KAAT,CAAeE,IAAf,CAAqBM,OAAD,IAAaA,OAAO,CAACJ,QAAR,CAAiBO,WAAjB,OAAmCP,QAAQ,CAACO,WAAT,EAApE,CAAb,CAF2C,CAE6D;;AACxG,QAAMC,EAAE,GAAGT,IAAI,CAACM,GAAhB,CAH2C,CAGxB;;AACnB,QAAMI,SAAS,GAAG,MAAMnB,WAAW,CAACkB,EAAD,CAAnC,CAJ2C,CAIJ;;AACvC,SAAOC,SAAP;AACH,CAND,C,CAQA;;;AACA,MAAMC,oBAAoB,GAAG,MAAOV,QAAP,IAAoB;AAC7C,QAAMJ,KAAK,GAAG,CAAC,MAAMP,WAAW,EAAlB,EAAsBO,KAApC,CAD6C,CACJ;AACzC;;AACA,QAAMC,KAAK,GAAGD,KAAK,CAACE,IAAN,CAAYC,IAAD,IAAUA,IAAI,CAACC,QAAL,CAAcO,WAAd,OAAgCP,QAAQ,CAACO,WAAT,EAArD,CAAd;;AACA,MAAIV,KAAK,KAAKK,SAAd,EAAwB;AACpB,WAAO,IAAP;AACH,GAFD,MAGI;AACA,WAAO,KAAP;AACH;AACJ,CAVD,C,CAYA;;;AACA,MAAMS,oBAAoB,GAAG,MAAOH,EAAP,IAAc;AACvC,QAAMT,IAAI,GAAG,CAAC,MAAMT,WAAW,CAACkB,EAAD,CAAlB,EAAwBT,IAArC;;AACA,MAAIA,IAAI,CAACE,QAAL,KAAkB,EAAtB,EAAyB;AACrB,WAAO,IAAP;AACH,GAFD,MAGI;AACA,WAAO,KAAP;AACH;AACJ,CARD;;AAWA,SAAQV,gBAAR,EAAyBY,UAAzB,EAAoCG,kBAApC,EAAuDI,oBAAvD,EAA6EC,oBAA7E","sourcesContent":["import { getAllUsers, getUserByID } from '../DALs/Users_DAL'\n\n//Checks if the user exist:\nconst checkIfUserExist = async (newuser) => {\n    const allUsers = (await getAllUsers())//All users from server\n    console.log(allUsers.users)\n    //check--->doing a check if new user equals with his name and password to user from users of server:\n    const check = allUsers.users.find((user) => (user.username === newuser.username) && (user.password === newuser.password))\n    if (check !== undefined){\n        return true\n    }\n    else{\n        return false\n    }\n}\n\n//Finding Users Id by its username:\nconst findUserID = async (username) => {\n    const allUsers = (await getAllUsers())//All users from server\n    const user = allUsers.find((element) => element.username === username)//finding specific user by its user name\n    if (user !== undefined){//if exist\n        return user._id//valueOf() - for getting value of user id because it is object.\n    }\n}\n\n//Finding and return a user by it's id:\nconst findUserByUserName = async (username) => {\n    const allUsers = await getAllUsers()//All users from server\n    const user = allUsers.users.find((element) => element.username.toUpperCase() === username.toUpperCase())//finding specific user by its user name\n    const id = user._id//id of this user\n    const foundUser = await getUserByID(id)//getUserByID from DAL , foundUser---> find data of user by id\n    return foundUser\n}\n\n//Checking if a username is allready exists:\nconst checkIfUsernameExist = async (username) => {\n    const users = (await getAllUsers()).users//All users from server\n    //check--->doing a check if new user equals with his name to user from users of server:\n    const check = users.find((user) => user.username.toUpperCase() === username.toUpperCase())\n    if (check !== undefined){\n        return true\n    }\n    else{\n        return false\n    }\n}\n\n//Checking if a password is allready exist:\nconst checkIfPasswordExist = async (id) => {\n    const user = (await getUserByID(id)).user\n    if (user.password !== ''){\n        return true\n    }\n    else{\n        return false\n    }       \n}\n\n\nexport {checkIfUserExist,findUserID,findUserByUserName,checkIfUsernameExist, checkIfPasswordExist}"]},"metadata":{},"sourceType":"module"}