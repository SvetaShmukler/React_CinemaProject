{"ast":null,"code":"import { getMemberByID } from \"../DALs/Members_DAL\";\nimport { deleteMovie, getAllMovies, getMovieByID } from \"../DALs/MoviesDAL\";\nimport { getAllSubscriptions, updateSubscriptionById } from \"../DALs/Subscriptions_DAL\"; //Search movies that includes an input word:\n\nconst searchMovies = (allMovies, searchInput) => {\n  const arrMovies = []; //array of movies after Search\n\n  for (let movie of allMovies) {\n    if (movie.name.toUpperCase().includes(searchInput.toUpperCase())) {\n      arrMovies.push(movie);\n    }\n  }\n\n  return arrMovies;\n}; //Checking if someone has watched a movie:\n\n\nconst checkIfMovieWatched = async id => {\n  let boolean = false; // movie dont watched\n\n  const Movie = await getMovieByID(id); //specific movie by id\n\n  const subscriptions = await getAllSubscriptions(); //subscriptions of this movie\n\n  for (let subscription of subscriptions) {\n    for (let movie of subscription.movies) {\n      if (movie.id === Movie._id) {\n        boolean = true;\n      }\n    }\n  }\n\n  return boolean;\n}; //Delete one movie from Subscriptions what watched this movie:\n\n\nconst deleteMovieFromSub = async id => {\n  const subscriptions = await getAllSubscriptions();\n\n  for (let subscription of subscriptions) {\n    for (let movie of subscription.movies) {\n      if (movie.movieId === id) {\n        let newMovies = subscription.movies;\n        let index = newMovies.findIndex(movie => movie.movieId === id);\n        newMovies.splice(index, 1);\n        let obj = { ...subscription,\n          movies: newMovies\n        };\n        await updateSubscriptionById(obj, subscription.memberId);\n      }\n    }\n  }\n}; //Delete one movie from Db and from Subscriptions what whatched this movie:\n\n\nconst deleteMovieFromAll = async id => {\n  await deleteMovieFromSub(id);\n  await deleteMovie(id);\n}; //Checking who of the members has watched a movie:\n\n\nconst whoWatchad = async movieId => {\n  let arr = []; //members who has watched\n\n  const subscriptions = await getAllSubscriptions(); //all subscriptions\n\n  for (let subscription of subscriptions) {\n    for (let movie of subscription.movies) {\n      if (movie.movieId === movieId) //for movie with specific id:\n        {\n          let member = await getMemberByID(subscription.memberId);\n          let obj = {\n            name: members.name,\n            date: movie.date\n          };\n          arr.push(obj);\n        }\n    }\n  }\n\n  return arr;\n}; //Finding all the not whatched movies to the member:\n\n\nconst findDontWatchedMovies = async watchedMovies => {\n  const movies = await getAllMovies(); //all movies\n\n  const newArr = [];\n\n  for (let movie of movies) {\n    //for each movie checking if its whatched by member\n    let bool = false;\n\n    for (let watchedMovie of watchedMovies) {\n      if (movie._id === watchedMovie.movieId) bool = true;\n    }\n\n    if (!bool) newArr.push(movie);\n  }\n\n  return newArr;\n}; // a function that finds a movie by it's name\n\n\nconst findMovieByName = async name => {\n  const movies = await getAllMovies();\n  const movie = movies.find(movie => movie.name === name);\n  return movie;\n}; //Checking someone has watched the movie\n\n\nconst checkIfSomeoneWatched = async movieId => {\n  let bool = false;\n  const Movie = await getMovieByID(movieId);\n  const subs = await getAllSubscriptions();\n\n  for (let sub of subs) {\n    for (let movie of sub.movies) {\n      if (movie.movieId === Movie._id) {\n        bool = true; //if someone has watched\n      }\n    }\n  }\n\n  return bool;\n};\n\nexport { searchMovies, checkIfMovieWatched, deleteMovieFromSub, deleteMovieFromAll, whoWatchad, findDontWatchedMovies, findMovieByName, checkIfSomeoneWatched };","map":{"version":3,"sources":["/Users/Sveta/Documents/Full_stack/Final Project/React_Client/src/Utils/Movies_Utils.js"],"names":["getMemberByID","deleteMovie","getAllMovies","getMovieByID","getAllSubscriptions","updateSubscriptionById","searchMovies","allMovies","searchInput","arrMovies","movie","name","toUpperCase","includes","push","checkIfMovieWatched","id","boolean","Movie","subscriptions","subscription","movies","_id","deleteMovieFromSub","movieId","newMovies","index","findIndex","splice","obj","memberId","deleteMovieFromAll","whoWatchad","arr","member","members","date","findDontWatchedMovies","watchedMovies","newArr","bool","watchedMovie","findMovieByName","find","checkIfSomeoneWatched","subs","sub"],"mappings":"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","sourcesContent":["import { getMemberByID } from \"../DALs/Members_DAL\"\nimport { deleteMovie, getAllMovies, getMovieByID } from \"../DALs/MoviesDAL\"\nimport {  getAllSubscriptions, updateSubscriptionById } from \"../DALs/Subscriptions_DAL\"\n\n//Search movies that includes an input word:\nconst searchMovies = (allMovies, searchInput) => {\n    const arrMovies = []//array of movies after Search\n    for (let movie of allMovies) {\n        if (movie.name.toUpperCase().includes(searchInput.toUpperCase()))\n        {\n            arrMovies.push(movie)\n        }\n    }\n    return arrMovies\n}\n\n\n//Checking if someone has watched a movie:\nconst checkIfMovieWatched = async (id)=>\n{\n    let boolean = false // movie dont watched\n    const Movie = await getMovieByID(id)//specific movie by id\n    const subscriptions = await getAllSubscriptions()//subscriptions of this movie\n    for (let subscription of subscriptions){\n        for (let movie of subscription.movies ){\n            if(movie.id===Movie._id){\n                boolean = true\n            }\n        }\n    }\n    return boolean\n}\n\n//Delete one movie from Subscriptions what watched this movie:\nconst deleteMovieFromSub = async (id)=>\n{\n    const subscriptions = await getAllSubscriptions()\n    for (let subscription of subscriptions){\n        for(let movie of subscription.movies){\n            if(movie.movieId === id){\n                let newMovies = subscription.movies\n                let index = newMovies.findIndex((movie)=> movie.movieId ===id)\n                newMovies.splice(index,1)\n                let obj = {...subscription, movies: newMovies}\n                await updateSubscriptionById(obj,subscription.memberId)\n            }\n        }\n    }\n}\n\n//Delete one movie from Db and from Subscriptions what whatched this movie:\nconst deleteMovieFromAll = async (id)=>\n{\n    await deleteMovieFromSub(id)\n    await deleteMovie(id)\n}\n\n//Checking who of the members has watched a movie:\nconst whoWatchad = async(movieId) =>\n{\n    let arr=[]//members who has watched\n    const subscriptions = await getAllSubscriptions()//all subscriptions\n    for (let subscription of subscriptions){\n        for(let movie of subscription.movies){\n            if(movie.movieId === movieId)//for movie with specific id:\n            {\n                let member = await getMemberByID(subscription.memberId)\n                let obj = {\n                    name:members.name,\n                    date:movie.date\n                }\n                arr.push(obj)\n            }\n        }\n    }\n    return arr\n}\n\n//Finding all the not whatched movies to the member:\nconst findDontWatchedMovies = async (watchedMovies) => {\n    const movies = await getAllMovies()//all movies\n    const newArr = []\n    for (let movie of movies) {//for each movie checking if its whatched by member\n        let bool = false\n        for (let watchedMovie of watchedMovies) {\n            if (movie._id === watchedMovie.movieId)\n                bool = true\n        }\n        if (!bool)\n            newArr.push(movie)\n    }\n    return newArr\n}\n\n\n// a function that finds a movie by it's name\nconst findMovieByName = async (name) => \n{\n    const movies = await getAllMovies()\n    const movie = movies.find((movie) => movie.name === name)\n    return movie;\n}\n\n//Checking someone has watched the movie\nconst checkIfSomeoneWatched = async (movieId) => {\n    let bool = false\n    const Movie = await getMovieByID(movieId)\n    const subs = await getAllSubscriptions()\n    for (let sub of subs) \n    {\n        for (let movie of sub.movies) \n        {\n            if (movie.movieId === Movie._id) \n            {\n                bool = true//if someone has watched\n            }\n        }\n    }\n    return bool\n}\nexport  {searchMovies,checkIfMovieWatched,deleteMovieFromSub,deleteMovieFromAll,whoWatchad,findDontWatchedMovies,findMovieByName,checkIfSomeoneWatched}"]},"metadata":{},"sourceType":"module"}