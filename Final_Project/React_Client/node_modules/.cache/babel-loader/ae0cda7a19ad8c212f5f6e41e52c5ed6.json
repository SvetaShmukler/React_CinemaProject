{"ast":null,"code":"var _jsxFileName = \"/Users/Sveta/Documents/Full_stack/Final Project/React_Client/src/Components/MovieSubscribeComponent.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { getAllMovies } from '../DALs/MoviesDAL';\nimport { findDontWatchedMovies } from '../Utils/Movies_Utils';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function MovieSubscribeComp() {\n  _s();\n\n  //states:\n  const [movies, setMovies] = useState();\n  const [movie, setMovie] = useState();\n  const [date, setDate] = useState();\n  const [id, setId] = useState();\n  const [boolean, setBoolean] = useState(true); //if movie is first--->true\n  //every time the function is loading and gets differnt \"props.show\" value the function is loading all the movies that the member didnt wathed into the select element\n  //\n\n  useEffect(async () => {\n    const allMovies = await getAllMovies(); //all movies from DB\n\n    const subscription = await getSubscriptionsByMemberId(props.id); //subscriptions of member\n\n    const watchedMovies = subscription === null || subscription === void 0 ? void 0 : subscription.movies;\n    let restMovies = [];\n\n    if (watchedMovies !== undefined) {\n      setBoolean(false);\n      restMovies = await findDontWatchedMovies(watchedMovies);\n      setMovies(restMovies);\n    } else {\n      setMovies(allMovies); //if the member didn't watch any movies that load all the movies to the select elemnt\n\n      setB(true);\n    }\n\n    setId(props.id);\n  }, [props.show]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [\"props.show ? \", /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"SubToMovieDiv\",\n      children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n        children: \"Add A New Movie\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 45\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        className: \"MoviesSelect\",\n        onChange: e => setMovie(e.target.value),\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 17\n        }, this), movieLister]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 22\n      }, this), \"Date: \", /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"date\",\n        onChange: e => setDate(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 19\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 80\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"subBtn\",\n        onClick: Subscribe,\n        children: \"Subscribe\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 22\n    }, this), \" : null\"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 12\n  }, this);\n}\n\n_s(MovieSubscribeComp, \"mjzC5T7FyURGuog9kR/UWh0qicI=\");\n\n_c = MovieSubscribeComp;\n\nvar _c;\n\n$RefreshReg$(_c, \"MovieSubscribeComp\");","map":{"version":3,"sources":["/Users/Sveta/Documents/Full_stack/Final Project/React_Client/src/Components/MovieSubscribeComponent.js"],"names":["React","useEffect","useState","getAllMovies","findDontWatchedMovies","MovieSubscribeComp","movies","setMovies","movie","setMovie","date","setDate","id","setId","boolean","setBoolean","allMovies","subscription","getSubscriptionsByMemberId","props","watchedMovies","restMovies","undefined","setB","show","e","target","value","movieLister","Subscribe"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,YAAT,QAA6B,mBAA7B;AACA,SAASC,qBAAT,QAAsC,uBAAtC;;AAEA,eAAe,SAASC,kBAAT,GAA6B;AAAA;;AACxC;AACA,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBL,QAAQ,EAApC;AACA,QAAM,CAACM,KAAD,EAAQC,QAAR,IAAoBP,QAAQ,EAAlC;AACA,QAAM,CAACQ,IAAD,EAAOC,OAAP,IAAkBT,QAAQ,EAAhC;AACA,QAAM,CAACU,EAAD,EAAKC,KAAL,IAAcX,QAAQ,EAA5B;AACA,QAAM,CAACY,OAAD,EAAUC,UAAV,IAAwBb,QAAQ,CAAC,IAAD,CAAtC,CANwC,CAMI;AAE5C;AACA;;AACAD,EAAAA,SAAS,CAAC,YAAY;AAClB,UAAMe,SAAS,GAAG,MAAMb,YAAY,EAApC,CADkB,CACoB;;AACtC,UAAMc,YAAY,GAAG,MAAMC,0BAA0B,CAACC,KAAK,CAACP,EAAP,CAArD,CAFkB,CAE6C;;AAC/D,UAAMQ,aAAa,GAAGH,YAAH,aAAGA,YAAH,uBAAGA,YAAY,CAAEX,MAApC;AACA,QAAIe,UAAU,GAAG,EAAjB;;AACA,QAAID,aAAa,KAAKE,SAAtB,EAAiC;AAC7BP,MAAAA,UAAU,CAAC,KAAD,CAAV;AACAM,MAAAA,UAAU,GAAG,MAAMjB,qBAAqB,CAACgB,aAAD,CAAxC;AACAb,MAAAA,SAAS,CAACc,UAAD,CAAT;AACH,KAJD,MAIO;AACHd,MAAAA,SAAS,CAACS,SAAD,CAAT,CADG,CACiB;;AACpBO,MAAAA,IAAI,CAAC,IAAD,CAAJ;AACH;;AACDV,IAAAA,KAAK,CAACM,KAAK,CAACP,EAAP,CAAL;AACH,GAdQ,EAcN,CAACO,KAAK,CAACK,IAAP,CAdM,CAAT;AAiBA,sBAAO;AAAA,6CACU;AAAK,MAAA,SAAS,EAAC,eAAf;AAAA,8BACT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADS,eACuB;AAAA;AAAA;AAAA;AAAA,cADvB,eAET;AAAQ,QAAA,SAAS,EAAC,cAAlB;AAAiC,QAAA,QAAQ,EAAEC,CAAC,IAAIhB,QAAQ,CAACgB,CAAC,CAACC,MAAF,CAASC,KAAV,CAAxD;AAAA,gCACI;AAAA;AAAA;AAAA;AAAA,gBADJ,EAEKC,WAFL;AAAA;AAAA;AAAA;AAAA;AAAA,cAFS,eAKA;AAAA;AAAA;AAAA;AAAA,cALA,yBAMH;AAAO,QAAA,IAAI,EAAC,MAAZ;AAAmB,QAAA,QAAQ,EAAEH,CAAC,IAAId,OAAO,CAACc,CAAC,CAACC,MAAF,CAASC,KAAV;AAAzC;AAAA;AAAA;AAAA;AAAA,cANG,eAM0D;AAAA;AAAA;AAAA;AAAA,cAN1D,eAOT;AAAQ,QAAA,SAAS,EAAC,QAAlB;AAA2B,QAAA,OAAO,EAAEE,SAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAPS;AAAA;AAAA;AAAA;AAAA;AAAA,YADV;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AAWH;;GAtCuBxB,kB;;KAAAA,kB","sourcesContent":["import React, { useEffect, useState } from 'react'\nimport { getAllMovies } from '../DALs/MoviesDAL'\nimport { findDontWatchedMovies } from '../Utils/Movies_Utils'\n\nexport default function MovieSubscribeComp(){\n    //states:\n    const [movies, setMovies] = useState()\n    const [movie, setMovie] = useState()\n    const [date, setDate] = useState()\n    const [id, setId] = useState()\n    const [boolean, setBoolean] = useState(true)//if movie is first--->true\n\n    //every time the function is loading and gets differnt \"props.show\" value the function is loading all the movies that the member didnt wathed into the select element\n    //\n    useEffect(async () => {\n        const allMovies = await getAllMovies()//all movies from DB\n        const subscription = await getSubscriptionsByMemberId(props.id)//subscriptions of member\n        const watchedMovies = subscription?.movies\n        let restMovies = []\n        if (watchedMovies !== undefined) {\n            setBoolean(false)\n            restMovies = await findDontWatchedMovies(watchedMovies)\n            setMovies(restMovies)\n        } else {\n            setMovies(allMovies)//if the member didn't watch any movies that load all the movies to the select elemnt\n            setB(true)\n        }\n        setId(props.id)\n    }, [props.show])\n    \n    \n    return(<div>\n        props.show ? <div className='SubToMovieDiv'>\n            <strong>Add A New Movie</strong><br />\n            <select className='MoviesSelect' onChange={e => setMovie(e.target.value)}>\n                <option></option>\n                {movieLister}\n            </select><br />\n            Date: <input type='date' onChange={e => setDate(e.target.value)} /><br />\n            <button className='subBtn' onClick={Subscribe}>Subscribe</button>\n        </div> : null\n    </div>)\n}"]},"metadata":{},"sourceType":"module"}