{"ast":null,"code":"var _jsxFileName = \"/Users/Sveta/Documents/Full_stack/Final Project/React_Client/src/Components/MoviesWatchedComponent.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport { getMovieByID } from '../DALs/MoviesDAL';\nimport { checkIfHasSubscription, getSubscriptionsByMemberId } from '../Utils/Subscriptions_Utils';\nimport MovieSubscribeComp from './MovieSubscribeComponent';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function MoviesWatchedComp(props) {\n  _s();\n\n  //states:\n  const [moviesArray, setMoviesArray] = useState();\n  const [boolean, setBoolean] = useState(false);\n  const [showAddMovie, setshowAddMovie] = useState(false); //Chcecking if the member has a subscription:\n\n  useEffect(async () => {\n    if (await checkIfHasSubscription(props.id)) //if member has subscriptions\n      {\n        const subscriptions = await getSubscriptionsByMemberId(props.id); //subscriptions of member\n\n        let arr = []; //array of movies names and date\n\n        for (let movie of subscriptions.movies) //for each movie of subscriptions DB\n        {\n          let obj = await getMovieByID(movie.movieId); //get movie from DB\n\n          let newObj = {\n            //create movie object\n            name: obj === null || obj === void 0 ? void 0 : obj.name,\n            date: movie.date\n          };\n          arr.push(newObj); //add to array\n        }\n\n        setMoviesArray(arr);\n      } else {\n      console.log(props.id);\n\n      if (props.refresh) {\n        props.cb();\n      }\n\n      setMoviesArray([]);\n    }\n  }, [boolean, props.refresh, props.id]); //Then a page refresh:\n\n  const refresh = () => {\n    setshowAddMovie(!showAddMovie);\n    setBoolean(!boolean);\n    props.cb();\n  }; //List of watched movies by member:\n\n\n  let moviesList = \"\";\n\n  if (moviesArray !== undefined) {\n    moviesList = moviesArray.map((movie, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n      children: [/*#__PURE__*/_jsxDEV(Link, {\n        to: `/mainPage/movie/${movie.name}`,\n        children: movie.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 71\n      }, this), movie.date]\n    }, index, true, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 53\n    }, this));\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n      className: \"whiteH4\",\n      children: \"Movies Watched:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"yello\",\n      onClick: () => setshowAddMovie(showAddMovie),\n      children: \"Subscribe to new movie \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(MovieSubscribeComp, {\n      id: props.id,\n      cb: refresh,\n      show: showAddMovie\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 77\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: moviesList\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 12\n  }, this);\n}\n\n_s(MoviesWatchedComp, \"Lwxs5byey5BUAToxRDHKBA0zGGQ=\");\n\n_c = MoviesWatchedComp;\n\nvar _c;\n\n$RefreshReg$(_c, \"MoviesWatchedComp\");","map":{"version":3,"sources":["/Users/Sveta/Documents/Full_stack/Final Project/React_Client/src/Components/MoviesWatchedComponent.js"],"names":["React","useEffect","useState","Link","getMovieByID","checkIfHasSubscription","getSubscriptionsByMemberId","MovieSubscribeComp","MoviesWatchedComp","props","moviesArray","setMoviesArray","boolean","setBoolean","showAddMovie","setshowAddMovie","id","subscriptions","arr","movie","movies","obj","movieId","newObj","name","date","push","console","log","refresh","cb","moviesList","undefined","map","index"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react'\nimport { Link } from 'react-router-dom'\nimport { getMovieByID } from '../DALs/MoviesDAL'\nimport { checkIfHasSubscription, getSubscriptionsByMemberId } from '../Utils/Subscriptions_Utils'\nimport MovieSubscribeComp from './MovieSubscribeComponent'\n\nexport default function MoviesWatchedComp(props) {\n    //states:\n    const [moviesArray, setMoviesArray] = useState()\n    const [boolean, setBoolean] = useState(false)\n    const [showAddMovie, setshowAddMovie] = useState(false)\n\n    //Chcecking if the member has a subscription:\n    useEffect(async()=>{\n        if(await checkIfHasSubscription(props.id))//if member has subscriptions\n        {\n            const subscriptions = await getSubscriptionsByMemberId(props.id)//subscriptions of member\n            let arr = []//array of movies names and date\n            for(let movie of subscriptions.movies)//for each movie of subscriptions DB\n            {\n                let obj = await getMovieByID(movie.movieId)//get movie from DB\n                let newObj = {//create movie object\n                    name: obj?.name,\n                    date: movie.date\n                }\n                arr.push(newObj)//add to array\n            }\n            setMoviesArray(arr)\n        }\n        else\n        {\n            console.log(props.id)\n            if(props.refresh)\n            {\n                props.cb()\n            }\n            setMoviesArray([])\n        }\n    },[boolean,props.refresh,props.id])\n\n    //Then a page refresh:\n    const refresh = () => {\n        setshowAddMovie(!showAddMovie)\n        setBoolean(!boolean)\n        props.cb()\n    }\n\n    //List of watched movies by member:\n    let moviesList = \"\"\n    if(moviesArray !== undefined){\n        moviesList = moviesArray.map((movie,index)=><li key = {index}><Link to={`/mainPage/movie/${movie.name}`}>{movie.name}</Link>{movie.date}</li>)\n    }\n\n    return(<div>\n        <h4 className='whiteH4'>Movies Watched:</h4>\n        <button className =\"yello\"onClick={()=>setshowAddMovie(showAddMovie)}>Subscribe to new movie </button>\n        <MovieSubscribeComp id={props.id} cb={refresh} show={showAddMovie}/><br/>\n        <ul>{moviesList}</ul>\n    </div>)\n}"]},"metadata":{},"sourceType":"module"}