{"ast":null,"code":"import { getAllUsers, getUserByID } from '../DALs/Users_DAL'; //Checks if the user exist:\n\nconst checkIfUserExist = async newuser => {\n  const allUsers = await getAllUsers(); //All users from server\n  //check--->doing a check if new user equals with his name and password to user from users of server:\n\n  const check = allUsers.users.find(user => user.username.toUpperCase() === newuser.username.toUpperCase() && user.password === newuser.password);\n\n  if (check !== undefined) {\n    return true;\n  } else {\n    return false;\n  }\n}; //Finding Users Id by its username:\n\n\nconst findUserID = async username => {\n  const allUsers = await getAllUsers(); //All users from server\n\n  const user = allUsers.users.find(element => element.username === username); //finding specific user by its user name\n\n  if (user !== undefined) //if exist\n    {\n      return user._id.valueOf(); //valueOf() - for getting value of user id because it is object.\n    }\n}; //Finding and return a user by it's id:\n\n\nconst findUserByUserName = async username => {\n  const allUsers = await getAllUsers(); //All users from server\n\n  const user = allUsers.users.find(element => element.username.toUpperCase() === username.toUpperCase()); //finding specific user by its user name\n\n  const id = user._id; //id of this user\n\n  const foundUser = await getUserByID(id); //getUserByID from DAL , foundUser---> find data of user by id\n\n  return foundUser;\n}; //Checking if a username is allready exists:\n\n\nconst checkIfUsernameExist = async username => {\n  const users = (await getAllUsers()).users; //All users from server\n  //check--->doing a check if new user equals with his name to user from users of server:\n\n  const check = users.find(user => user.username.toUpperCase() === username.toUpperCase());\n\n  if (check !== undefined) {\n    return true;\n  } else {\n    return false;\n  }\n}; //Checking if a password is allready exist:\n\n\nconst checkIfPasswordExist = async id => {\n  const user = (await getUserByID(id)).user;\n\n  if (user.password !== '') {\n    return true;\n  } else {\n    return false;\n  }\n}; //Cheking if user is the admin:\n\n\nconst checkIfAdmin = async user => {\n  const allUsers = await getAllUsers();\n\n  if (allUsers.users[1] === undefined) // if only 1 user he is admin.\n    {\n      return true;\n    }\n\n  const index = allUsers.users.findIndex(element => element._id === user._id); //index of input user\n\n  if (index === 0) //if index=0 its an admin\n    {\n      return true;\n    } else {\n    return false;\n  }\n}; // Getting a strings permissions array (permissionsOfUser) and convert it to boolean permissions array a\n\n\nconst getPermissionsArray = permissionsOfUser => {\n  const boolArray = [false, false, false, false, false, false, false, false];\n  const permissionsArray = [\"View Subscriptions\", \"Create Subscriptions\", \"Delete Subscriptions\", \"Update Subscriptions\", \"View Movies\", \"Create Movies\", \"Delete Movies\", \"Update Movie\"];\n\n  for (const permission of permissionsArray) {}\n};\n\nexport { checkIfUserExist, findUserID, findUserByUserName, checkIfUsernameExist, checkIfPasswordExist, checkIfAdmin };","map":{"version":3,"sources":["/Users/Sveta/Documents/Full_stack/Final Project/React_Client/src/Utils/Users_Utils.js"],"names":["getAllUsers","getUserByID","checkIfUserExist","newuser","allUsers","check","users","find","user","username","toUpperCase","password","undefined","findUserID","element","_id","valueOf","findUserByUserName","id","foundUser","checkIfUsernameExist","checkIfPasswordExist","checkIfAdmin","index","findIndex","getPermissionsArray","permissionsOfUser","boolArray","permissionsArray","permission"],"mappings":"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","sourcesContent":["import { getAllUsers, getUserByID } from '../DALs/Users_DAL'\n\n//Checks if the user exist:\nconst checkIfUserExist = async (newuser) => {\n    const allUsers = await getAllUsers()//All users from server\n    //check--->doing a check if new user equals with his name and password to user from users of server:\n    const check = allUsers.users.find((user) =>\n    (user.username).toUpperCase() ===(newuser.username).toUpperCase() && user.password === newuser.password)\n    if (check !== undefined)\n    {\n        return true\n    }\n    else\n    {\n        return false\n    }\n}\n\n//Finding Users Id by its username:\nconst findUserID = async (username) => {\n    const allUsers = (await getAllUsers())//All users from server\n    const user = allUsers.users.find((element) => element.username === username)//finding specific user by its user name\n    if (user !== undefined)//if exist\n    {\n        return user._id.valueOf()//valueOf() - for getting value of user id because it is object.\n    }\n}\n\n//Finding and return a user by it's id:\nconst findUserByUserName = async (username) => {\n    const allUsers = await getAllUsers()//All users from server\n    const user = allUsers.users.find((element) => element.username.toUpperCase() === username.toUpperCase())//finding specific user by its user name\n    const id = user._id//id of this user\n    const foundUser = await getUserByID(id)//getUserByID from DAL , foundUser---> find data of user by id\n    return foundUser\n}\n\n//Checking if a username is allready exists:\nconst checkIfUsernameExist = async (username) => {\n    const users = (await getAllUsers()).users//All users from server\n    //check--->doing a check if new user equals with his name to user from users of server:\n    const check = users.find((user) => user.username.toUpperCase() === username.toUpperCase())\n    if (check !== undefined)\n    {\n        return true\n    }\n    else\n    {\n        return false\n    }\n}\n\n//Checking if a password is allready exist:\nconst checkIfPasswordExist = async (id) => {\n    const user = (await getUserByID(id)).user\n    if (user.password !== '')\n    {\n        return true\n    }\n    else\n    {\n        return false\n    }       \n}\n\n\n//Cheking if user is the admin:\nconst checkIfAdmin = async (user) => {\n    const allUsers = await getAllUsers()\n    if (allUsers.users[1] === undefined)// if only 1 user he is admin.\n    {\n        return true\n    }\n    const index = allUsers.users.findIndex((element) => element._id === user._id)//index of input user\n    if (index === 0)//if index=0 its an admin\n    {\n        return true\n    }\n    else\n    {\n        return false\n    }\n}\n// Getting a strings permissions array (permissionsOfUser) and convert it to boolean permissions array a\nconst getPermissionsArray = (permissionsOfUser) =>\n{\n    const boolArray = [false,false,false,false,false,false,false,false]\n    const permissionsArray = [\"View Subscriptions\",\"Create Subscriptions\",\"Delete Subscriptions\",\"Update Subscriptions\",\"View Movies\",\"Create Movies\",\"Delete Movies\",\"Update Movie\"]\n    for (const permission of permissionsArray) {\n\n    }\n}\n\n\n\n\nexport {checkIfUserExist,findUserID,findUserByUserName,checkIfUsernameExist, checkIfPasswordExist, checkIfAdmin}"]},"metadata":{},"sourceType":"module"}