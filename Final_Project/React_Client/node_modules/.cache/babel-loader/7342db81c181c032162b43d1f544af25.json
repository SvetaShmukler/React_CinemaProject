{"ast":null,"code":"var _jsxFileName = \"/Users/Sveta/Documents/Full_stack/Final Project/React_Client/src/Components/CreateAccountComponent.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { useState } from 'react';\nimport { useNavigate } from 'react-router';\nimport { updateUserById } from '../DALs/Users_DAL';\nimport { findUserByUserName, checkIfUsernameExist, findUserID, checkIfPasswordExist } from '../Utils/Users_Utils';\nimport '../Style/style.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function CreateAccountComp() {\n  _s();\n\n  const [username, setUserName] = useState();\n  const [password, setPassword] = useState();\n  const navigate = useNavigate(); // for transiton to another page\n  //Checking all the inputs from the client and if it valid it saves the new password in the database:\n\n  const checkAndSend = async () => {\n    const existUser = await findUserByUserName(username); //findUserByUserName() from Utils.\n\n    const newUserObj = {\n      //Create new obj user(user,userJson,permissions from server)\n      user: {\n        username: username,\n        password: password\n      },\n      userJson: { ...existUser.userJson\n      },\n      permissions: { ...existUser.permissions\n      }\n    };\n\n    if (await checkIfUsernameExist(username)) {\n      //validating the username\n      const id = await findUserID(username); //finding id of user\n\n      if (await checkIfPasswordExist(id)) //validating the password\n        alert('This User Already Exists');else {\n        await updateUserById(newUserObj, id);\n        navigate('/'); //navigating back to login\n      }\n    } else alert('The Username Is Incorrect');\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"mainLoginDiv\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"loginH1\",\n      children: \"Movies -Subscriptions Web Site\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"loginSmallDiv\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"loginH2\",\n        children: \"Create an Account\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"strong\", {\n        style: {\n          color: 'white'\n        },\n        children: \"Username: \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 13\n      }, this), \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 65\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        className: \"loginInput\",\n        type: \"text\",\n        name: \"username\",\n        onChange: e => setUserName(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 114\n      }, this), /*#__PURE__*/_jsxDEV(\"strong\", {\n        children: \"Password: \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 13\n      }, this), \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 41\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        className: \"loginInput\",\n        type: \"text\",\n        name: \"password\",\n        onChange: e => setPassword(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 116\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 121\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: checkAndSend,\n        children: \"Create\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 13\n      }, this), \" \\xA0\\xA0\", /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => navigate('/'),\n        children: \"Cancel\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 66\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 9\n  }, this);\n}\n\n_s(CreateAccountComp, \"AgasCb3QpmmxBSErdNWwQdOM8XM=\", false, function () {\n  return [useNavigate];\n});\n\n_c = CreateAccountComp;\n\nvar _c;\n\n$RefreshReg$(_c, \"CreateAccountComp\");","map":{"version":3,"sources":["/Users/Sveta/Documents/Full_stack/Final Project/React_Client/src/Components/CreateAccountComponent.js"],"names":["React","useState","useNavigate","updateUserById","findUserByUserName","checkIfUsernameExist","findUserID","checkIfPasswordExist","CreateAccountComp","username","setUserName","password","setPassword","navigate","checkAndSend","existUser","newUserObj","user","userJson","permissions","id","alert","color","e","target","value"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAUC,QAAV,QAA0B,OAA1B;AACA,SAASC,WAAT,QAA4B,cAA5B;AACA,SAASC,cAAT,QAA+B,mBAA/B;AACA,SAASC,kBAAT,EAA4BC,oBAA5B,EAAiDC,UAAjD,EAA6DC,oBAA7D,QAAyF,sBAAzF;AACA,OAAO,oBAAP;;AAEA,eAAe,SAASC,iBAAT,GAA6B;AAAA;;AAExC,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BT,QAAQ,EAAxC;AACA,QAAM,CAACU,QAAD,EAAWC,WAAX,IAA0BX,QAAQ,EAAxC;AAEA,QAAMY,QAAQ,GAAGX,WAAW,EAA5B,CALwC,CAKR;AAElC;;AACA,QAAMY,YAAY,GAAG,YAAY;AAC/B,UAAMC,SAAS,GAAG,MAAMX,kBAAkB,CAACK,QAAD,CAA1C,CAD+B,CACqB;;AAEpD,UAAMO,UAAU,GAAG;AAAC;AAChBC,MAAAA,IAAI,EAAE;AAAER,QAAAA,QAAQ,EAAEA,QAAZ;AAAsBE,QAAAA,QAAQ,EAAEA;AAAhC,OADS;AAEfO,MAAAA,QAAQ,EAAE,EAAE,GAAGH,SAAS,CAACG;AAAf,OAFK;AAGfC,MAAAA,WAAW,EAAE,EAAE,GAAGJ,SAAS,CAACI;AAAf;AAHE,KAAnB;;AAKA,QAAI,MAAMd,oBAAoB,CAACI,QAAD,CAA9B,EAA0C;AAAG;AACzC,YAAMW,EAAE,GAAG,MAAMd,UAAU,CAACG,QAAD,CAA3B,CADsC,CACD;;AACrC,UAAI,MAAMF,oBAAoB,CAACa,EAAD,CAA9B,EAAqC;AACjCC,QAAAA,KAAK,CAAC,0BAAD,CAAL,CADJ,KAEK;AACD,cAAMlB,cAAc,CAACa,UAAD,EAAYI,EAAZ,CAApB;AACAP,QAAAA,QAAQ,CAAC,GAAD,CAAR,CAFC,CAEe;AACnB;AACJ,KARD,MASIQ,KAAK,CAAC,2BAAD,CAAL;AACH,GAlBH;;AAoBE,sBACI;AAAK,IAAA,SAAS,EAAC,cAAf;AAAA,4BACI;AAAI,MAAA,SAAS,EAAC,SAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,eAEI;AAAK,MAAA,SAAS,EAAC,eAAf;AAAA,8BACA;AAAI,QAAA,SAAS,EAAC,SAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADA,eAEA;AAAQ,QAAA,KAAK,EAAE;AAACC,UAAAA,KAAK,EAAC;AAAP,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFA,oBAEoD;AAAA;AAAA;AAAA;AAAA,cAFpD,eAGA;AAAO,QAAA,SAAS,EAAC,YAAjB;AAA8B,QAAA,IAAI,EAAC,MAAnC;AAA0C,QAAA,IAAI,EAAC,UAA/C;AAA0D,QAAA,QAAQ,EAAEC,CAAC,IAAEb,WAAW,CAACa,CAAC,CAACC,MAAF,CAASC,KAAV;AAAlF;AAAA;AAAA;AAAA;AAAA,cAHA,eAGqG;AAAA;AAAA;AAAA;AAAA,cAHrG,eAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAJA,oBAI4B;AAAA;AAAA;AAAA;AAAA,cAJ5B,eAKA;AAAO,QAAA,SAAS,EAAG,YAAnB;AAAgC,QAAA,IAAI,EAAC,MAArC;AAA4C,QAAA,IAAI,EAAC,UAAjD;AAA4D,QAAA,QAAQ,EAAEF,CAAC,IAAEX,WAAW,CAACW,CAAC,CAACC,MAAF,CAASC,KAAV;AAApF;AAAA;AAAA;AAAA;AAAA,cALA,eAKuG;AAAA;AAAA;AAAA;AAAA,cALvG,eAK4G;AAAA;AAAA;AAAA;AAAA,cAL5G,eAMA;AAAQ,QAAA,OAAO,EAAEX,YAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cANA,4BAOA;AAAQ,QAAA,OAAO,EAAE,MAAMD,QAAQ,CAAC,GAAD,CAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAPA,eAOqD;AAAA;AAAA;AAAA;AAAA,cAPrD;AAAA;AAAA;AAAA;AAAA;AAAA,YAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAaH;;GAzCuBL,iB;UAKHN,W;;;KALGM,iB","sourcesContent":["import React from 'react'\nimport  { useState } from 'react'\nimport { useNavigate } from 'react-router';\nimport { updateUserById } from '../DALs/Users_DAL';\nimport { findUserByUserName,checkIfUsernameExist,findUserID, checkIfPasswordExist } from '../Utils/Users_Utils';\nimport '../Style/style.css'\n\nexport default function CreateAccountComp() {\n\n    const [username, setUserName] = useState()\n    const [password, setPassword] = useState()\n\n    const navigate = useNavigate(); // for transiton to another page\n\n  //Checking all the inputs from the client and if it valid it saves the new password in the database:\n  const checkAndSend = async () => {\n    const existUser = await findUserByUserName(username)//findUserByUserName() from Utils.\n    \n    const newUserObj = {//Create new obj user(user,userJson,permissions from server)\n        user: { username: username, password: password },\n        userJson: { ...existUser.userJson },\n        permissions: { ...existUser.permissions }\n    }\n    if (await checkIfUsernameExist(username)) {  //validating the username\n        const id = await findUserID(username)//finding id of user\n        if (await checkIfPasswordExist(id))  //validating the password\n            alert('This User Already Exists')\n        else {\n            await updateUserById(newUserObj,id)\n            navigate('/')   //navigating back to login\n        }\n    } else\n        alert('The Username Is Incorrect')\n    }\n\n    return (\n        <div className='mainLoginDiv'>\n            <h1 className='loginH1'>Movies -Subscriptions Web Site</h1>\n            <div className='loginSmallDiv'>\n            <h2 className='loginH2'>Create an Account</h2>\n            <strong style={{color:'white'}}>Username: </strong> <br/>\n            <input className='loginInput' type=\"text\" name=\"username\" onChange={e=>setUserName(e.target.value)}/><br/>\n            <strong>Password: </strong> <br/>\n            <input className = 'loginInput' type=\"text\" name=\"password\" onChange={e=>setPassword(e.target.value)}/><br/><br/>\n            <button onClick={checkAndSend}>Create</button> &nbsp;&nbsp;\n            <button onClick={() => navigate('/')}>Cancel</button><br />\n            </div>       \n        </div>)\n}"]},"metadata":{},"sourceType":"module"}