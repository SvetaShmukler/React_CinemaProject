{"ast":null,"code":"import { getAllUsers, getUserByID } from '../DALs/Users_DAL'; //Checks if the user exist:\n\nconst checkIfUserExist = async newuser => {\n  const allUsers = (await getAllUsers()).users; //All users from server\n  //check--->doing a check if new user equals with his name and password to user from users of server:\n\n  const check = allUsers.find(user => user.username === newuser.username && user.password === newuser.password);\n  const user1 = allUsers.find(user => user.username === \"SvetaAdmin\" && user.password === \"123456\");\n  console.log(allUsers);\n  console.log(check);\n\n  if (check !== undefined) {\n    return true;\n    console.log(\"true\");\n  } else {\n    return false;\n    console.log(\"false\");\n  }\n}; //Finding Users Id by its username:\n\n\nconst findUserID = async username => {\n  const allUsers = await getAllUsers(); //All users from server\n\n  const user = allUsers.users.find(element => element.username === username); //finding specific user by its user name\n\n  console.log(user._id);\n\n  if (user !== undefined) {\n    //if exist\n    return user._id; //valueOf() - for getting value of user id because it is object.\n  }\n}; //Finding and return a user by it's id:\n\n\nconst findUserByUserName = async username => {\n  const allUsers = await getAllUsers(); //All users from server\n\n  const user = allUsers.users.find(element => element.username.toUpperCase() === username.toUpperCase()); //finding specific user by its user name\n\n  const id = user._id; //id of this user\n\n  const foundUser = await getUserByID(id); //getUserByID from DAL , foundUser---> find data of user by id\n\n  return foundUser;\n}; //Checking if a username is allready exists:\n\n\nconst checkIfUsernameExist = async username => {\n  const users = (await getAllUsers()).users; //All users from server\n  //check--->doing a check if new user equals with his name to user from users of server:\n\n  const check = users.find(user => user.username.toUpperCase() === username.toUpperCase());\n\n  if (check !== undefined) {\n    return true;\n  } else {\n    return false;\n  }\n}; //Checking if a password is allready exist:\n\n\nconst checkIfPasswordExist = async id => {\n  const user = (await getUserByID(id)).user;\n\n  if (user.password !== '') {\n    return true;\n  } else {\n    return false;\n  }\n};\n\nexport { checkIfUserExist, findUserID, findUserByUserName, checkIfUsernameExist, checkIfPasswordExist };","map":{"version":3,"sources":["/Users/Sveta/Documents/Full_stack/Final Project/React_Client/src/Utils/Users_Utils.js"],"names":["getAllUsers","getUserByID","checkIfUserExist","newuser","allUsers","users","check","find","user","username","password","user1","console","log","undefined","findUserID","element","_id","findUserByUserName","toUpperCase","id","foundUser","checkIfUsernameExist","checkIfPasswordExist"],"mappings":"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","sourcesContent":["import { getAllUsers, getUserByID } from '../DALs/Users_DAL'\n\n//Checks if the user exist:\nconst checkIfUserExist = async (newuser) => {\n    const allUsers = (await getAllUsers()).users//All users from server\n    //check--->doing a check if new user equals with his name and password to user from users of server:\n    const check = allUsers.find((user) => (user.username === newuser.username) && (user.password === newuser.password))\n    \n    const user1 = allUsers.find((user)=>user.username ===\"SvetaAdmin\"&&user.password===\"123456\")\n    \n    console.log(allUsers)\n    \n    console.log(check)\n    if (check !== undefined){\n        return true\n        console.log(\"true\")\n    }\n    else{\n        return false\n        console.log(\"false\")\n    }\n}\n\n//Finding Users Id by its username:\nconst findUserID = async (username) => {\n    const allUsers = (await getAllUsers())//All users from server\n    const user = allUsers.users.find((element) => element.username === username)//finding specific user by its user name\n    console.log(user._id)\n    if (user !== undefined){//if exist\n        return user._id//valueOf() - for getting value of user id because it is object.\n    }\n}\n\n//Finding and return a user by it's id:\nconst findUserByUserName = async (username) => {\n    const allUsers = await getAllUsers()//All users from server\n    const user = allUsers.users.find((element) => element.username.toUpperCase() === username.toUpperCase())//finding specific user by its user name\n    const id = user._id//id of this user\n    const foundUser = await getUserByID(id)//getUserByID from DAL , foundUser---> find data of user by id\n    return foundUser\n}\n\n//Checking if a username is allready exists:\nconst checkIfUsernameExist = async (username) => {\n    const users = (await getAllUsers()).users//All users from server\n    //check--->doing a check if new user equals with his name to user from users of server:\n    const check = users.find((user) => user.username.toUpperCase() === username.toUpperCase())\n    if (check !== undefined){\n        return true\n    }\n    else{\n        return false\n    }\n}\n\n//Checking if a password is allready exist:\nconst checkIfPasswordExist = async (id) => {\n    const user = (await getUserByID(id)).user\n    if (user.password !== ''){\n        return true\n    }\n    else{\n        return false\n    }       \n}\n\n\nexport {checkIfUserExist,findUserID,findUserByUserName,checkIfUsernameExist, checkIfPasswordExist}"]},"metadata":{},"sourceType":"module"}