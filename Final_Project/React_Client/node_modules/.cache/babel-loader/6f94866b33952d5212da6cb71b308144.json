{"ast":null,"code":"const {\n  deleteSubscription,\n  getAllSubscriptions,\n  updateSubscriptionById,\n  addSubscription\n} = require(\"../DALs/Subscriptions_DAL\"); //Finding subscriptions by member id:\n\n\nconst getSubscriptionsByMemberId = async id => {\n  const subs = await getAllSubscriptions();\n  const subscription = subs.find(sub => sub.memberId === id);\n  return subscription;\n}; //Delete member's subscriptions by member's id:\n\n\nconst deleteSubscriptionById = async id => {\n  const sub = await getSubscriptionsByMemberId(id);\n\n  if (sub !== undefined) {\n    await deleteSubscription(sub._id);\n  }\n}; //Checking if a member has subscription:\n\n\nconst checkIfHasSubscription = async id => {\n  let boolean = false; //dont has subscription\n\n  const subscriptions = await getAllSubscriptions(); //all subscriptions from DB\n\n  for (let sub of subscriptions) {\n    if (sub.memberId === id) {\n      //checking if member with memberId has subscriptions\n      boolean = true;\n    }\n  }\n\n  return boolean;\n}; //Adding a movie to the subscription's movie array in the DB:\n\n\nconst addMovieToSubscriptions = async (memberId, newMovie) => {\n  const subBool = await checkIfHasSubscription(memberId);\n\n  if (subBool) {\n    const sub = await getSubscriptionsByMemberId(memberId);\n    let array = [...sub.movies, newMovie];\n    const newObj = { ...sub,\n      movies: array\n    };\n    await updateSubscriptionById(newObj, memberId);\n  } else {\n    const newSub = {\n      memberId: memberId,\n      movies: [newMovie]\n    };\n    await addSubscription(newSub);\n  }\n};\n\nexport { deleteSubscriptionById, checkIfHasSubscription, getSubscriptionsByMemberId, addMovieToSubscriptions };","map":{"version":3,"sources":["/Users/Sveta/Documents/Full_stack/Final Project/React_Client/src/Utils/Subscriptions_Utils.js"],"names":["deleteSubscription","getAllSubscriptions","updateSubscriptionById","addSubscription","require","getSubscriptionsByMemberId","id","subs","subscription","find","sub","memberId","deleteSubscriptionById","undefined","_id","checkIfHasSubscription","boolean","subscriptions","addMovieToSubscriptions","newMovie","subBool","array","movies","newObj","newSub"],"mappings":"AAAA,MAAM;AAAGA,EAAAA,kBAAH;AAAuBC,EAAAA,mBAAvB;AAA4CC,EAAAA,sBAA5C;AAAoEC,EAAAA;AAApE,IAAwFC,OAAO,CAAC,2BAAD,CAArG,C,CAEA;;;AACA,MAAMC,0BAA0B,GAAG,MAAMC,EAAN,IACnC;AACI,QAAMC,IAAI,GAAG,MAAMN,mBAAmB,EAAtC;AACA,QAAMO,YAAY,GAAGD,IAAI,CAACE,IAAL,CAAWC,GAAD,IAAOA,GAAG,CAACC,QAAJ,KAAeL,EAAhC,CAArB;AACA,SAAOE,YAAP;AACH,CALD,C,CAMA;;;AACA,MAAMI,sBAAsB,GAAG,MAAMN,EAAN,IAC/B;AACI,QAAMI,GAAG,GAAG,MAAML,0BAA0B,CAACC,EAAD,CAA5C;;AACA,MAAII,GAAG,KAAIG,SAAX,EACA;AACI,UAAMb,kBAAkB,CAACU,GAAG,CAACI,GAAL,CAAxB;AACH;AACJ,CAPD,C,CASA;;;AACA,MAAMC,sBAAsB,GAAG,MAAMT,EAAN,IAC/B;AACI,MAAIU,OAAO,GAAG,KAAd,CADJ,CACwB;;AACpB,QAAMC,aAAa,GAAG,MAAMhB,mBAAmB,EAA/C,CAFJ,CAEqD;;AACjD,OAAI,IAAIS,GAAR,IAAeO,aAAf,EAA6B;AACzB,QAAGP,GAAG,CAACC,QAAJ,KAAeL,EAAlB,EAAqB;AAAC;AAClBU,MAAAA,OAAO,GAAG,IAAV;AACH;AACJ;;AACD,SAAOA,OAAP;AACH,CAVD,C,CAaA;;;AACA,MAAME,uBAAuB,GAAG,OAAOP,QAAP,EAAiBQ,QAAjB,KAA8B;AAC1D,QAAMC,OAAO,GAAG,MAAML,sBAAsB,CAACJ,QAAD,CAA5C;;AACA,MAAIS,OAAJ,EAAa;AACT,UAAMV,GAAG,GAAG,MAAML,0BAA0B,CAACM,QAAD,CAA5C;AACA,QAAIU,KAAK,GAAG,CAAC,GAAGX,GAAG,CAACY,MAAR,EAAgBH,QAAhB,CAAZ;AACA,UAAMI,MAAM,GAAG,EAAE,GAAGb,GAAL;AAAUY,MAAAA,MAAM,EAAED;AAAlB,KAAf;AACA,UAAMnB,sBAAsB,CAACqB,MAAD,EAASZ,QAAT,CAA5B;AACH,GALD,MAKO;AACH,UAAMa,MAAM,GAAG;AACXb,MAAAA,QAAQ,EAAEA,QADC;AAEXW,MAAAA,MAAM,EAAE,CAACH,QAAD;AAFG,KAAf;AAIA,UAAMhB,eAAe,CAACqB,MAAD,CAArB;AACH;AACJ,CAdD;;AAgBA,SAAQZ,sBAAR,EAA+BG,sBAA/B,EAAsDV,0BAAtD,EAAiFa,uBAAjF","sourcesContent":["const {  deleteSubscription, getAllSubscriptions, updateSubscriptionById, addSubscription } = require(\"../DALs/Subscriptions_DAL\")\n\n//Finding subscriptions by member id:\nconst getSubscriptionsByMemberId = async(id)=>\n{\n    const subs = await getAllSubscriptions()\n    const subscription = subs.find((sub)=>sub.memberId===id)\n    return subscription\n}\n//Delete member's subscriptions by member's id:\nconst deleteSubscriptionById = async(id) =>\n{\n    const sub = await getSubscriptionsByMemberId(id)\n    if (sub !==undefined)\n    {\n        await deleteSubscription(sub._id)\n    }\n}\n\n//Checking if a member has subscription:\nconst checkIfHasSubscription = async(id) =>\n{\n    let boolean = false //dont has subscription\n    const subscriptions = await getAllSubscriptions()//all subscriptions from DB\n    for(let sub of subscriptions){\n        if(sub.memberId===id){//checking if member with memberId has subscriptions\n            boolean = true\n        }\n    }\n    return boolean\n}\n\n\n//Adding a movie to the subscription's movie array in the DB:\nconst addMovieToSubscriptions = async (memberId, newMovie) => {\n    const subBool = await checkIfHasSubscription(memberId)\n    if (subBool) {\n        const sub = await getSubscriptionsByMemberId(memberId)\n        let array = [...sub.movies, newMovie]\n        const newObj = { ...sub, movies: array }\n        await updateSubscriptionById(newObj, memberId)\n    } else {\n        const newSub = {\n            memberId: memberId,\n            movies: [newMovie]\n        }\n        await addSubscription(newSub)\n    }\n}\n\nexport {deleteSubscriptionById,checkIfHasSubscription,getSubscriptionsByMemberId,addMovieToSubscriptions}"]},"metadata":{},"sourceType":"module"}