{"ast":null,"code":"var _jsxFileName = \"/Users/Sveta/Documents/Full_stack/REACT/SPA_EX/src/Components/Project_React1/Client/Main.js\";\nimport React, { Component } from 'react';\nimport { getAllUsers, deleteUser, updateUser } from '../DALs/DAL_USERS';\nimport Users from './Users';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst usersURL = 'https://jsonplaceholder.typicode.com/users';\n\nclass Main extends Component {\n  constructor() {\n    super();\n\n    this.handleInputChange = e => {\n      let searchedText = e.target.value; //text from search box \n\n      const stringSearchedText = searchedText.toUpperCase();\n      const usersArray = this.state.users;\n      const searchedUsers = usersArray.filter(user => user.name.toUpperCase().includes(stringSearchedText) || user.email.toUpperCase().includes(stringSearchedText));\n      this.setState({\n        filteredUsers: searchedUsers,\n        refresh: true\n      });\n    };\n\n    this.handleDelete = id => {\n      const newArray = deleteUser(id, this.state.filteredUsers);\n      this.setState({\n        filteredUsers: newArray,\n        users: newArray\n      });\n    };\n\n    this.handleUpdate = obj => {\n      const updatedUsers = updateUser(this.state.filteredUsers, obj);\n      this.setState({\n        filteredUsersArr: updatedUsers,\n        users: updatedUsers\n      });\n    };\n\n    this.refreshStop = () => {\n      this.setState({\n        refresh: false\n      });\n    };\n\n    this.pressed = id => {\n      this.setState({\n        pressedID: id\n      });\n    };\n\n    this.state = {\n      users: [],\n      filteredUsers: [],\n      names: [],\n      emails: [],\n      refresh: false,\n      pressedID: \"\"\n    };\n  } //Geting API data and saving of it in State:\n\n\n  async componentDidMount() {\n    const users = await getAllUsers(usersURL);\n    this.setState({\n      users: users.data\n    });\n    this.setState({\n      filteredUsers: users.data\n    });\n    this.setState({\n      names: users.data.name\n    });\n    this.setState({\n      emails: users.data.email\n    });\n  } //Handling search-input from Client and presenting users after search:\n\n\n  render() {\n    const repUsers = this.state.filteredUsers.map((user, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Users, {\n        pressedId: this.state.pressedID,\n        updateFunction: this.handleUpdate,\n        deleteFunction: this.handleDelete,\n        pressed: this.pressed,\n        refreshStopper: this.refreshStop,\n        refresh: this.state.refresh,\n        user: user,\n        id: user.id\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 89\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 324\n      }, this)]\n    }, index, true, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 72\n    }, this));\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        border: '2px solid black',\n        background: 'pink',\n        borderRadius: '12px',\n        padding: '5px',\n        width: '500px',\n        textAlign: 'center',\n        margin: 'auto'\n      },\n      children: [\"Search \", /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        onChange: this.handleInputChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 24\n      }, this), \"\\xA0\\xA0\", /*#__PURE__*/_jsxDEV(\"button\", {\n        children: \"Add\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 37\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 43\n      }, this), repUsers]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default Main;","map":{"version":3,"sources":["/Users/Sveta/Documents/Full_stack/REACT/SPA_EX/src/Components/Project_React1/Client/Main.js"],"names":["React","Component","getAllUsers","deleteUser","updateUser","Users","usersURL","Main","constructor","handleInputChange","e","searchedText","target","value","stringSearchedText","toUpperCase","usersArray","state","users","searchedUsers","filter","user","name","includes","email","setState","filteredUsers","refresh","handleDelete","id","newArray","handleUpdate","obj","updatedUsers","filteredUsersArr","refreshStop","pressed","pressedID","names","emails","componentDidMount","data","render","repUsers","map","index","border","background","borderRadius","padding","width","textAlign","margin"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,WAAT,EAAqBC,UAArB,EAAgCC,UAAhC,QAAkD,mBAAlD;AACA,OAAOC,KAAP,MAAkB,SAAlB;;AAEA,MAAMC,QAAQ,GAAG,4CAAjB;;AAEA,MAAMC,IAAN,SAAmBN,SAAnB,CAA6B;AACzBO,EAAAA,WAAW,GAAG;AACV;;AADU,SAqBdC,iBArBc,GAqBOC,CAAD,IAAO;AACvB,UAAIC,YAAY,GAAGD,CAAC,CAACE,MAAF,CAASC,KAA5B,CADuB,CACW;;AAClC,YAAMC,kBAAkB,GAAGH,YAAY,CAACI,WAAb,EAA3B;AACA,YAAMC,UAAU,GAAG,KAAKC,KAAL,CAAWC,KAA9B;AACA,YAAMC,aAAa,GAAGH,UAAU,CAACI,MAAX,CAAmBC,IAAD,IAAYA,IAAI,CAACC,IAAL,CAAUP,WAAV,GAAwBQ,QAAxB,CAAiCT,kBAAjC,CAAD,IAA2DO,IAAI,CAACG,KAAL,CAAWT,WAAX,GAAyBQ,QAAzB,CAAkCT,kBAAlC,CAAxF,CAAtB;AACA,WAAKW,QAAL,CAAc;AAAEC,QAAAA,aAAa,EAAEP,aAAjB;AAA+BQ,QAAAA,OAAO,EAAC;AAAvC,OAAd;AACH,KA3Ba;;AAAA,SA6BdC,YA7Bc,GA6BEC,EAAD,IAAQ;AACnB,YAAMC,QAAQ,GAAG3B,UAAU,CAAC0B,EAAD,EAAK,KAAKZ,KAAL,CAAWS,aAAhB,CAA3B;AACA,WAAKD,QAAL,CAAc;AAACC,QAAAA,aAAa,EAACI,QAAf;AAAwBZ,QAAAA,KAAK,EAACY;AAA9B,OAAd;AACH,KAhCa;;AAAA,SAkCdC,YAlCc,GAkCEC,GAAD,IAAQ;AAEnB,YAAMC,YAAY,GAAG7B,UAAU,CAAC,KAAKa,KAAL,CAAWS,aAAZ,EAA0BM,GAA1B,CAA/B;AACA,WAAKP,QAAL,CAAc;AAACS,QAAAA,gBAAgB,EAACD,YAAlB;AAA+Bf,QAAAA,KAAK,EAACe;AAArC,OAAd;AACH,KAtCa;;AAAA,SA0CdE,WA1Cc,GA0CF,MAAI;AACZ,WAAKV,QAAL,CAAc;AAACE,QAAAA,OAAO,EAAC;AAAT,OAAd;AACH,KA5Ca;;AAAA,SA6CdS,OA7Cc,GA6CLP,EAAD,IAAM;AACV,WAAKJ,QAAL,CAAc;AAACY,QAAAA,SAAS,EAACR;AAAX,OAAd;AACH,KA/Ca;;AAEV,SAAKZ,KAAL,GAAa;AACTC,MAAAA,KAAK,EAAC,EADG;AAETQ,MAAAA,aAAa,EAAC,EAFL;AAGTY,MAAAA,KAAK,EAAC,EAHG;AAITC,MAAAA,MAAM,EAAC,EAJE;AAKTZ,MAAAA,OAAO,EAAC,KALC;AAMTU,MAAAA,SAAS,EAAC;AAND,KAAb;AAQH,GAXwB,CAazB;;;AACuB,QAAjBG,iBAAiB,GAAG;AACtB,UAAMtB,KAAK,GAAG,MAAMhB,WAAW,CAACI,QAAD,CAA/B;AACA,SAAKmB,QAAL,CAAc;AAAEP,MAAAA,KAAK,EAAEA,KAAK,CAACuB;AAAf,KAAd;AACA,SAAKhB,QAAL,CAAc;AAAEC,MAAAA,aAAa,EAAER,KAAK,CAACuB;AAAvB,KAAd;AACA,SAAKhB,QAAL,CAAc;AAAEa,MAAAA,KAAK,EAAEpB,KAAK,CAACuB,IAAN,CAAWnB;AAApB,KAAd;AACA,SAAKG,QAAL,CAAc;AAAEc,MAAAA,MAAM,EAAErB,KAAK,CAACuB,IAAN,CAAWjB;AAArB,KAAd;AACH,GApBwB,CAqBzB;;;AA8BAkB,EAAAA,MAAM,GAAG;AAGL,UAAMC,QAAQ,GAAG,KAAK1B,KAAL,CAAWS,aAAX,CAAyBkB,GAAzB,CAA6B,CAACvB,IAAD,EAAOwB,KAAP,kBAAiB;AAAA,8BAAiB,QAAC,KAAD;AAAO,QAAA,SAAS,EAAE,KAAK5B,KAAL,CAAWoB,SAA7B;AAAwC,QAAA,cAAc,EAAE,KAAKN,YAA7D;AAA2E,QAAA,cAAc,EAAE,KAAKH,YAAhG;AAA8G,QAAA,OAAO,EAAE,KAAKQ,OAA5H;AAAqI,QAAA,cAAc,EAAE,KAAKD,WAA1J;AAAuK,QAAA,OAAO,EAAE,KAAKlB,KAAL,CAAWU,OAA3L;AAAoM,QAAA,IAAI,EAAEN,IAA1M;AAA4N,QAAA,EAAE,EAAEA,IAAI,CAACQ;AAArO,SAAqNgB,KAArN;AAAA;AAAA;AAAA;AAAA,cAAjB,eAA4P;AAAA;AAAA;AAAA;AAAA,cAA5P;AAAA,OAAUA,KAAV;AAAA;AAAA;AAAA;AAAA,YAA9C,CAAjB;AACA,wBACI;AAAK,MAAA,KAAK,EAAE;AAAEC,QAAAA,MAAM,EAAE,iBAAV;AAA6BC,QAAAA,UAAU,EAAE,MAAzC;AAAiDC,QAAAA,YAAY,EAAE,MAA/D;AAAuEC,QAAAA,OAAO,EAAE,KAAhF;AAAuFC,QAAAA,KAAK,EAAE,OAA9F;AAAuGC,QAAAA,SAAS,EAAE,QAAlH;AAA4HC,QAAAA,MAAM,EAAE;AAApI,OAAZ;AAAA,yCAEW;AAAO,QAAA,IAAI,EAAC,MAAZ;AAAmB,QAAA,QAAQ,EAAE,KAAK3C;AAAlC;AAAA;AAAA;AAAA;AAAA,cAFX,2BAGI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAHJ,eAGwB;AAAA;AAAA;AAAA;AAAA,cAHxB,eAG8B;AAAA;AAAA;AAAA;AAAA,cAH9B,EAIKkC,QAJL;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ;AASH;;AAhEwB;;AAkE7B,eAAepC,IAAf","sourcesContent":["import React, { Component } from 'react';\r\nimport { getAllUsers,deleteUser,updateUser } from '../DALs/DAL_USERS';\r\nimport Users from './Users';\r\n\r\nconst usersURL = 'https://jsonplaceholder.typicode.com/users'\r\n\r\nclass Main extends Component {\r\n    constructor() {\r\n        super()\r\n        this.state = { \r\n            users:[], \r\n            filteredUsers:[], \r\n            names:[], \r\n            emails:[], \r\n            refresh:false, \r\n            pressedID:\"\"\r\n        }\r\n    }\r\n\r\n    //Geting API data and saving of it in State:\r\n    async componentDidMount() {\r\n        const users = await getAllUsers(usersURL)\r\n        this.setState({ users: users.data })\r\n        this.setState({ filteredUsers: users.data })\r\n        this.setState({ names: users.data.name })\r\n        this.setState({ emails: users.data.email })\r\n    }\r\n    //Handling search-input from Client and presenting users after search:\r\n    handleInputChange = (e) => {\r\n        let searchedText = e.target.value;//text from search box \r\n        const stringSearchedText = searchedText.toUpperCase();\r\n        const usersArray = this.state.users\r\n        const searchedUsers = usersArray.filter((user) => ((user.name.toUpperCase().includes(stringSearchedText)) || (user.email.toUpperCase().includes(stringSearchedText))));\r\n        this.setState({ filteredUsers: searchedUsers,refresh:true })\r\n    }\r\n\r\n    handleDelete = (id) => {\r\n        const newArray = deleteUser(id, this.state.filteredUsers)\r\n        this.setState({filteredUsers:newArray,users:newArray})\r\n    }\r\n\r\n    handleUpdate = (obj) =>{\r\n        \r\n        const updatedUsers = updateUser(this.state.filteredUsers,obj)\r\n        this.setState({filteredUsersArr:updatedUsers,users:updatedUsers})\r\n    }\r\n\r\n\r\n    \r\n    refreshStop=()=>{\r\n        this.setState({refresh:false})\r\n    }\r\n    pressed=(id)=>{\r\n        this.setState({pressedID:id})\r\n    }\r\n\r\n\r\n    render() {\r\n\r\n\r\n        const repUsers = this.state.filteredUsers.map((user, index) => <div key={index}><Users pressedId={this.state.pressedID} updateFunction={this.handleUpdate} deleteFunction={this.handleDelete} pressed={this.pressed} refreshStopper={this.refreshStop} refresh={this.state.refresh} user={user} key={index} id={user.id} /><br /></div>)\r\n        return (\r\n            <div style={{ border: '2px solid black', background: 'pink', borderRadius: '12px', padding: '5px', width: '500px', textAlign: 'center', margin: 'auto' }}>\r\n\r\n                Search <input type=\"text\" onChange={this.handleInputChange} />&nbsp;&nbsp;\r\n                <button>Add</button><br /><br />\r\n                {repUsers}\r\n\r\n            </div>\r\n        );\r\n    }\r\n}\r\nexport default Main"]},"metadata":{},"sourceType":"module"}