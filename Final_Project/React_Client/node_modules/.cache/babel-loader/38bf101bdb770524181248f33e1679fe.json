{"ast":null,"code":"var _jsxFileName = \"/Users/Sveta/Documents/Full_stack/REACT/SPA_EX/src/Components/Project_React1/Client/Main.js\";\nimport React, { Component } from 'react';\nimport { getAllUsers, deleteUser, updateUser } from '../DALs/DAL_USERS';\nimport Users from './Users';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst usersURL = 'https://jsonplaceholder.typicode.com/users';\n\nclass Main extends Component {\n  constructor() {\n    super();\n\n    this.handleInputChange = e => {\n      let searchedText = e.target.value; //text from search box \n\n      const stringSearchedText = searchedText.toUpperCase();\n      const usersArray = this.state.users;\n      const searchedUsers = usersArray.filter(user => user.name.toUpperCase().includes(stringSearchedText) || user.email.toUpperCase().includes(stringSearchedText));\n      this.setState({\n        filteredUsers: searchedUsers,\n        refresh: true\n      });\n    };\n\n    this.handleDelete = id => {\n      const usersAfterDelete = deleteUser(id, this.state.filteredUsers);\n      this.setState({\n        filteredUsers: usersAfterDelete,\n        users: usersAfterDelete\n      });\n    };\n\n    this.refreshStop = () => {\n      this.setState({\n        refresh: false\n      });\n    };\n\n    this.getPressed = id => {\n      this.setState({\n        pressedID: id\n      });\n    };\n\n    this.state = {\n      users: [],\n      filteredUsers: [],\n      names: [],\n      emails: [],\n      refresh: false,\n      pressedID: ''\n    };\n  } //Geting API data and saving of it in State:\n\n\n  async componentDidMount() {\n    const users = await getAllUsers(usersURL);\n    this.setState({\n      users: users.data\n    });\n    this.setState({\n      filteredUsers: users.data\n    });\n    this.setState({\n      names: users.data.name\n    });\n    this.setState({\n      emails: users.data.email\n    });\n  } //Handling search-input from Client and presenting users after search:\n\n\n  render() {\n    const repUsers = this.state.filteredUsers.map((user, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Users, {\n        pressedId: this.state.pressedID,\n        deleteFunction: this.handleDelete,\n        pressed: this.getPressed,\n        refreshStopper: this.refreshStop,\n        refresh: this.state.refresh,\n        user: user,\n        id: user.id\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 219\n      }, this)]\n    }, index, true, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 9\n    }, this));\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        border: '2px solid black',\n        background: 'pink',\n        borderRadius: '12px',\n        padding: '5px',\n        width: '500px',\n        textAlign: 'center',\n        margin: 'auto'\n      },\n      children: [\"Search \", /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        onChange: this.handleInputChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 24\n      }, this), \"\\xA0\\xA0\", /*#__PURE__*/_jsxDEV(\"button\", {\n        children: \"Add\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 37\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 43\n      }, this), repUsers]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default Main;","map":{"version":3,"sources":["/Users/Sveta/Documents/Full_stack/REACT/SPA_EX/src/Components/Project_React1/Client/Main.js"],"names":["React","Component","getAllUsers","deleteUser","updateUser","Users","usersURL","Main","constructor","handleInputChange","e","searchedText","target","value","stringSearchedText","toUpperCase","usersArray","state","users","searchedUsers","filter","user","name","includes","email","setState","filteredUsers","refresh","handleDelete","id","usersAfterDelete","refreshStop","getPressed","pressedID","names","emails","componentDidMount","data","render","repUsers","map","index","border","background","borderRadius","padding","width","textAlign","margin"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { getAllUsers,deleteUser,updateUser } from '../DALs/DAL_USERS';\r\nimport Users from './Users';\r\n\r\nconst usersURL = 'https://jsonplaceholder.typicode.com/users'\r\n\r\nclass Main extends Component {\r\n    constructor() {\r\n        super()\r\n        this.state = { \r\n            users:[], \r\n            filteredUsers:[], \r\n            names:[], \r\n            emails:[], \r\n            refresh:false, \r\n            pressedID:''\r\n        }\r\n    }\r\n\r\n    //Geting API data and saving of it in State:\r\n    async componentDidMount() {\r\n        const users = await getAllUsers(usersURL)\r\n        this.setState({ users: users.data })\r\n        this.setState({ filteredUsers: users.data })\r\n        this.setState({ names: users.data.name })\r\n        this.setState({ emails: users.data.email })\r\n    }\r\n    \r\n    //Handling search-input from Client and presenting users after search:\r\n    handleInputChange = (e) => {\r\n        let searchedText = e.target.value;//text from search box \r\n        const stringSearchedText = searchedText.toUpperCase();\r\n        const usersArray = this.state.users\r\n        const searchedUsers = usersArray.filter((user) => ((user.name.toUpperCase().includes(stringSearchedText)) || (user.email.toUpperCase().includes(stringSearchedText))));\r\n        this.setState({ filteredUsers: searchedUsers,refresh:true })\r\n    }\r\n    \r\n    //Delete User:\r\n    handleDelete = (id) => {\r\n        const usersAfterDelete = deleteUser(id, this.state.filteredUsers)\r\n        this.setState({filteredUsers:usersAfterDelete,users:usersAfterDelete})\r\n    }\r\n\r\n    //Introdusing boolean variable (refresh), in order to fail endless loop in Users Component.\r\n    refreshStop = () => {\r\n        this.setState({refresh:false})\r\n    }\r\n\r\n    //Gettin id of each user wich transmitted to Users Component.\r\n    getPressed = (id) => {\r\n        this.setState({pressedID:id})\r\n    }\r\n\r\n    render(){\r\n\r\n        const repUsers = this.state.filteredUsers.map((user,index) => \r\n        <div key={index}>\r\n            <Users pressedId = {this.state.pressedID} deleteFunction = {this.handleDelete} pressed={this.getPressed} refreshStopper={this.refreshStop} refresh={this.state.refresh} user={user} key={index} id={user.id}/><br/>\r\n        </div>)\r\n        return(\r\n            <div style={{ border:'2px solid black', background:'pink', borderRadius:'12px', padding:'5px', width:'500px', textAlign:'center', margin: 'auto' }}>\r\n\r\n                Search <input type=\"text\" onChange={this.handleInputChange} />&nbsp;&nbsp;\r\n                <button>Add</button><br /><br />\r\n                {repUsers}\r\n\r\n            </div>\r\n        );\r\n    }\r\n}\r\nexport default Main"]},"metadata":{},"sourceType":"module"}