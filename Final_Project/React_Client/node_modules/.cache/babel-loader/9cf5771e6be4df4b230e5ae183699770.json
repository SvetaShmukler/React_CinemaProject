{"ast":null,"code":"import { deleteMovie, getMovieByID } from \"../DALs/MoviesDAL\";\nimport { getAllSubscriptions, updateSubscriptionById } from \"../DALs/Subscriptions_DAL\"; //Search movies that includes an input word:\n\nconst searchMovies = (allMovies, searchInput) => {\n  const arrMovies = []; //array of movies after Search\n\n  for (let movie of allMovies) {\n    if (movie.name.toUpperCase().includes(searchInput.toUpperCase())) {\n      arrMovies.push(movie);\n    }\n  }\n\n  return arrMovies;\n}; //Checking if someone has watched a movie:\n\n\nconst checkIfMovieWatched = async id => {\n  let boolean = false; // movie dont watched\n\n  const movieById = await getMovieByID(id); //specific movie by id\n\n  const subscriptions = await getAllSubscriptions(); //subscriptions of this movie\n\n  for (let subscription of subscriptions) {\n    for (let movie of subscription.movies) {\n      if (movie.id === movieById._id) {\n        boolean = true;\n      }\n    }\n  }\n\n  return boolean;\n}; //Delete one movie from Subscriptions what watched this movie:\n\n\nconst deleteMovieFromSub = async id => {\n  const subscriptions = await getAllSubscriptions();\n\n  for (let subscription of subscriptions) {\n    for (let movie of subscription.movies) {\n      if (movie.movieId === id) {\n        let newMovies = subscription.movies;\n        let index = newMovies.findIndex(movie => movie.movieId === id);\n        newMovies.splice(index, 1);\n        let obj = { ...subscription,\n          movies: newMovies\n        };\n        await updateSubscriptionById(obj, subscription.memberId);\n      }\n    }\n  }\n}; //Delete one movie from Db and from Subscriptions what whatched this movie:\n\n\nconst deleteMovieFromAll = async id => {\n  await deleteMovieFromSub(id);\n  await deleteMovie(id);\n}; //Checking who of the members has watched a movie:\n\n\nconst whoWatchad = async id => {\n  membersArr = [];\n  const subscriptions = await getAllSubscriptions();\n};\n\nexport { searchMovies, checkIfMovieWatched, deleteMovieFromSub, deleteMovieFromAll };","map":{"version":3,"sources":["/Users/Sveta/Documents/Full_stack/Final Project/React_Client/src/Utils/Movies_Utils.js"],"names":["deleteMovie","getMovieByID","getAllSubscriptions","updateSubscriptionById","searchMovies","allMovies","searchInput","arrMovies","movie","name","toUpperCase","includes","push","checkIfMovieWatched","id","boolean","movieById","subscriptions","subscription","movies","_id","deleteMovieFromSub","movieId","newMovies","index","findIndex","splice","obj","memberId","deleteMovieFromAll","whoWatchad","membersArr"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,YAAtB,QAA0C,mBAA1C;AACA,SAASC,mBAAT,EAA8BC,sBAA9B,QAA4D,2BAA5D,C,CAEA;;AACA,MAAMC,YAAY,GAAG,CAACC,SAAD,EAAYC,WAAZ,KAA4B;AAC7C,QAAMC,SAAS,GAAG,EAAlB,CAD6C,CACzB;;AACpB,OAAK,IAAIC,KAAT,IAAkBH,SAAlB,EAA6B;AACzB,QAAIG,KAAK,CAACC,IAAN,CAAWC,WAAX,GAAyBC,QAAzB,CAAkCL,WAAW,CAACI,WAAZ,EAAlC,CAAJ,EACA;AACIH,MAAAA,SAAS,CAACK,IAAV,CAAeJ,KAAf;AACH;AACJ;;AACD,SAAOD,SAAP;AACH,CATD,C,CAYA;;;AACA,MAAMM,mBAAmB,GAAG,MAAOC,EAAP,IAC5B;AACI,MAAIC,OAAO,GAAG,KAAd,CADJ,CACwB;;AACpB,QAAMC,SAAS,GAAG,MAAMf,YAAY,CAACa,EAAD,CAApC,CAFJ,CAE4C;;AACxC,QAAMG,aAAa,GAAG,MAAMf,mBAAmB,EAA/C,CAHJ,CAGqD;;AACjD,OAAK,IAAIgB,YAAT,IAAyBD,aAAzB,EAAuC;AACnC,SAAK,IAAIT,KAAT,IAAkBU,YAAY,CAACC,MAA/B,EAAuC;AACnC,UAAGX,KAAK,CAACM,EAAN,KAAWE,SAAS,CAACI,GAAxB,EAA4B;AACxBL,QAAAA,OAAO,GAAG,IAAV;AACH;AACJ;AACJ;;AACD,SAAOA,OAAP;AACH,CAbD,C,CAeA;;;AACA,MAAMM,kBAAkB,GAAG,MAAOP,EAAP,IAC3B;AACI,QAAMG,aAAa,GAAG,MAAMf,mBAAmB,EAA/C;;AACA,OAAK,IAAIgB,YAAT,IAAyBD,aAAzB,EAAuC;AACnC,SAAI,IAAIT,KAAR,IAAiBU,YAAY,CAACC,MAA9B,EAAqC;AACjC,UAAGX,KAAK,CAACc,OAAN,KAAkBR,EAArB,EAAwB;AACpB,YAAIS,SAAS,GAAGL,YAAY,CAACC,MAA7B;AACA,YAAIK,KAAK,GAAGD,SAAS,CAACE,SAAV,CAAqBjB,KAAD,IAAUA,KAAK,CAACc,OAAN,KAAiBR,EAA/C,CAAZ;AACAS,QAAAA,SAAS,CAACG,MAAV,CAAiBF,KAAjB,EAAuB,CAAvB;AACA,YAAIG,GAAG,GAAG,EAAC,GAAGT,YAAJ;AAAkBC,UAAAA,MAAM,EAAEI;AAA1B,SAAV;AACA,cAAMpB,sBAAsB,CAACwB,GAAD,EAAKT,YAAY,CAACU,QAAlB,CAA5B;AACH;AACJ;AACJ;AACJ,CAdD,C,CAgBA;;;AACA,MAAMC,kBAAkB,GAAG,MAAOf,EAAP,IAC3B;AACI,QAAMO,kBAAkB,CAACP,EAAD,CAAxB;AACA,QAAMd,WAAW,CAACc,EAAD,CAAjB;AACH,CAJD,C,CAMA;;;AACA,MAAMgB,UAAU,GAAG,MAAMhB,EAAN,IACnB;AACIiB,EAAAA,UAAU,GAAC,EAAX;AACA,QAAMd,aAAa,GAAG,MAAMf,mBAAmB,EAA/C;AAEH,CALD;;AAQA,SAASE,YAAT,EAAsBS,mBAAtB,EAA0CQ,kBAA1C,EAA6DQ,kBAA7D","sourcesContent":["import { deleteMovie, getMovieByID } from \"../DALs/MoviesDAL\"\nimport { getAllSubscriptions, updateSubscriptionById } from \"../DALs/Subscriptions_DAL\"\n\n//Search movies that includes an input word:\nconst searchMovies = (allMovies, searchInput) => {\n    const arrMovies = []//array of movies after Search\n    for (let movie of allMovies) {\n        if (movie.name.toUpperCase().includes(searchInput.toUpperCase()))\n        {\n            arrMovies.push(movie)\n        }\n    }\n    return arrMovies\n}\n\n\n//Checking if someone has watched a movie:\nconst checkIfMovieWatched = async (id)=>\n{\n    let boolean = false // movie dont watched\n    const movieById = await getMovieByID(id)//specific movie by id\n    const subscriptions = await getAllSubscriptions()//subscriptions of this movie\n    for (let subscription of subscriptions){\n        for (let movie of subscription.movies ){\n            if(movie.id===movieById._id){\n                boolean = true\n            }\n        }\n    }\n    return boolean\n}\n\n//Delete one movie from Subscriptions what watched this movie:\nconst deleteMovieFromSub = async (id)=>\n{\n    const subscriptions = await getAllSubscriptions()\n    for (let subscription of subscriptions){\n        for(let movie of subscription.movies){\n            if(movie.movieId === id){\n                let newMovies = subscription.movies\n                let index = newMovies.findIndex((movie)=> movie.movieId ===id)\n                newMovies.splice(index,1)\n                let obj = {...subscription, movies: newMovies}\n                await updateSubscriptionById(obj,subscription.memberId)\n            }\n        }\n    }\n}\n\n//Delete one movie from Db and from Subscriptions what whatched this movie:\nconst deleteMovieFromAll = async (id)=>\n{\n    await deleteMovieFromSub(id)\n    await deleteMovie(id)\n}\n\n//Checking who of the members has watched a movie:\nconst whoWatchad = async(id) =>\n{\n    membersArr=[]\n    const subscriptions = await getAllSubscriptions()\n\n}\n\n\nexport  {searchMovies,checkIfMovieWatched,deleteMovieFromSub,deleteMovieFromAll}"]},"metadata":{},"sourceType":"module"}