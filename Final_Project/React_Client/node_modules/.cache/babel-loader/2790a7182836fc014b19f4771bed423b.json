{"ast":null,"code":"import { getAllUsers, getUserByID } from '../DALs/Users_DAL'; //Checks if the user exist:\n\nconst checkIfUserExist = async newuser => {\n  var _users$users;\n\n  const users = await getAllUsers(); //All users from server\n  //check--->doing a check if new user equals with his name and password to user from users of server:\n\n  const check = (_users$users = users.users) === null || _users$users === void 0 ? void 0 : _users$users.find(user => (user === null || user === void 0 ? void 0 : user.username).toUpperCase() === newuser.username.toUpperCase() && (user === null || user === void 0 ? void 0 : user.password) === newuser.password);\n\n  if (check !== undefined) {\n    return true;\n  } else {\n    return false;\n  }\n}; //Finding Users Id by its username:\n\n\nconst findUserID = async username => {\n  const allUsers = await getAllUsers(); //All users from server\n\n  const user = allUsers.users.find(element => element.username === username); //finding specific user by its user name\n\n  if (user !== undefined) //if exist\n    {\n      return user._id.valueOf(); //valueOf() - for getting value of user id because it is object.\n    }\n}; //Finding and return a user by it's id:\n\n\nconst findUserByUserName = async username => {\n  var _allUsers$users;\n\n  const allUsers = await getAllUsers(); //All users from server\n\n  const user = (_allUsers$users = allUsers.users) === null || _allUsers$users === void 0 ? void 0 : _allUsers$users.find(element => element.username.toUpperCase() === username.toUpperCase()); //finding specific user by its user name\n\n  const id = user._id; //id of this user\n\n  const foundUser = await getUserByID(id); //getUserByID from DAL , foundUser---> find data of user by id\n\n  return foundUser;\n}; //Checking if a username is allready exists:\n\n\nconst checkIfUsernameExist = async username => {\n  const users = (await getAllUsers()).users; //All users from server\n  //check--->doing a check if new user equals with his name to user from users of server:\n\n  const check = users.find(user => user.username.toUpperCase() === username.toUpperCase());\n\n  if (check !== undefined) {\n    return true;\n  } else {\n    return false;\n  }\n}; //Checking if a password is allready exist:\n\n\nconst checkIfPasswordExist = async id => {\n  const user = (await getUserByID(id)).user;\n\n  if (user.password !== '') {\n    return true;\n  } else {\n    return false;\n  }\n}; //Cheking if user is the admin:\n\n\nconst checkIfAdmin = async user => {\n  const allUsers = await getAllUsers();\n\n  if (allUsers.users[1] === undefined) // if only 1 user he is admin.\n    {\n      return true;\n    }\n\n  const index = allUsers.users.findIndex(element => element._id === user._id); //index of input user\n\n  if (index === 0) //if index=0 its an admin\n    {\n      return true;\n    } else {\n    return false;\n  }\n}; // Getting a strings permissions array (permissionsOfUser) and convert it to boolean permissions array and return it:\n\n\nconst getPermissionsArray = permissionsOfUser => {\n  const boolArray = [false, false, false, false, false, false, false, false];\n  const permissionsArray = [\"View Subscriptions\", \"Create Subscriptions\", \"Delete Subscriptions\", \"Update Subscriptions\", \"View Movies\", \"Create Movies\", \"Delete Movies\", \"Update Movie\"];\n\n  for (const per of permissionsArray) {\n    //for each permission of full permission array:\n    const permissionElement = permissionsOfUser.find(permission => permission === per); //finding element wich = permission of full permissions array\n\n    if (permissionElement !== undefined) {\n      //if its finded:\n      const index = permissionsArray.findIndex(per => per === permissionElement); //we must to find its index in full array\n\n      boolArray[index] = true; //its index in boolean array will be changed to true\n    }\n  }\n\n  return boolArray;\n}; // a function that check if any of the subscriptions releated permissions were pressed and retrun a bool accordingly\n\n\nconst subscriptionsPermissionsPressed = arr => {\n  let bool = false;\n  const newArr = arr.slice(0, 4);\n\n  for (const element of newArr) {\n    if (element === true) bool = true;\n  }\n\n  return bool;\n}; // a function that check if any of the movies releated permissions were pressed and retrun a bool accordingly\n\n\nconst moviesPermissionsPressed = arr => {\n  let bool = false;\n  const newArr = arr.slice(4, 8);\n\n  for (const element of newArr) {\n    if (element === true) bool = true;\n  }\n\n  return bool;\n}; //Converting of Boolean Array to string permissions:\n\n\nconst getPermissions = boolarr => {\n  const permissionsArray = [\"View Subscriptions\", \"Create Subscriptions\", \"Delete Subscriptions\", \"Update Subscriptions\", \"View Movies\", \"Create Movies\", \"Delete Movies\", \"Update Movie\"];\n  const newArr = [];\n  let index = 0;\n\n  for (let element of boolarr) {\n    if (element) {\n      newArr.push(permissionsArray[index]);\n      index++;\n    }\n  }\n\n  return newArr;\n};\n\nexport { checkIfUserExist, findUserID, findUserByUserName, checkIfUsernameExist, checkIfPasswordExist, checkIfAdmin, getPermissionsArray, subscriptionsPermissionsPressed, moviesPermissionsPressed, getPermissions };","map":{"version":3,"sources":["/Users/Sveta/Documents/Full_stack/Final Project/React_Client/src/Utils/Users_Utils.js"],"names":["getAllUsers","getUserByID","checkIfUserExist","newuser","users","check","find","user","username","toUpperCase","password","undefined","findUserID","allUsers","element","_id","valueOf","findUserByUserName","id","foundUser","checkIfUsernameExist","checkIfPasswordExist","checkIfAdmin","index","findIndex","getPermissionsArray","permissionsOfUser","boolArray","permissionsArray","per","permissionElement","permission","subscriptionsPermissionsPressed","arr","bool","newArr","slice","moviesPermissionsPressed","getPermissions","boolarr","push"],"mappings":"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","sourcesContent":["import { getAllUsers, getUserByID } from '../DALs/Users_DAL'\n\n//Checks if the user exist:\nconst checkIfUserExist = async (newuser) => {\n    const users = await getAllUsers()//All users from server\n    //check--->doing a check if new user equals with his name and password to user from users of server:\n    const check = users.users?.find((user) =>\n    (user?.username).toUpperCase() ===(newuser.username).toUpperCase() && user?.password === newuser.password)\n    if (check !== undefined)\n    {\n        return true\n    }\n    else\n    {\n        return false\n    }\n}\n\n//Finding Users Id by its username:\nconst findUserID = async (username) => {\n    const allUsers = (await getAllUsers())//All users from server\n    const user = allUsers.users.find((element) => element.username === username)//finding specific user by its user name\n    if (user !== undefined)//if exist\n    {\n        return user._id.valueOf()//valueOf() - for getting value of user id because it is object.\n    }\n}\n\n//Finding and return a user by it's id:\nconst findUserByUserName = async (username) => {\n    const allUsers = await getAllUsers()//All users from server\n    const user = allUsers.users?.find((element) => element.username.toUpperCase() === username.toUpperCase())//finding specific user by its user name\n    const id = user._id//id of this user\n    const foundUser = await getUserByID(id)//getUserByID from DAL , foundUser---> find data of user by id\n    return foundUser\n}\n\n//Checking if a username is allready exists:\nconst checkIfUsernameExist = async (username) => {\n    const users = (await getAllUsers()).users//All users from server\n    //check--->doing a check if new user equals with his name to user from users of server:\n    const check = users.find((user) => user.username.toUpperCase() === username.toUpperCase())\n    if (check !== undefined)\n    {\n        return true\n    }\n    else\n    {\n        return false\n    }\n}\n\n//Checking if a password is allready exist:\nconst checkIfPasswordExist = async (id) => {\n    const user = (await getUserByID(id)).user\n    if (user.password !== '')\n    {\n        return true\n    }\n    else\n    {\n        return false\n    }       \n}\n\n\n//Cheking if user is the admin:\nconst checkIfAdmin = async (user) => {\n    const allUsers = await getAllUsers()\n    if (allUsers.users[1] === undefined)// if only 1 user he is admin.\n    {\n        return true\n    }\n    const index = allUsers.users.findIndex((element) => element._id === user._id)//index of input user\n    if (index === 0)//if index=0 its an admin\n    {\n        return true\n    }\n    else\n    {\n        return false\n    }\n}\n// Getting a strings permissions array (permissionsOfUser) and convert it to boolean permissions array and return it:\nconst getPermissionsArray = (permissionsOfUser) =>\n{\n    const boolArray = [false,false,false,false,false,false,false,false]\n    const permissionsArray = [\"View Subscriptions\",\"Create Subscriptions\",\"Delete Subscriptions\",\"Update Subscriptions\",\"View Movies\",\"Create Movies\",\"Delete Movies\",\"Update Movie\"]\n    for (const per of permissionsArray) {//for each permission of full permission array:\n        const permissionElement = permissionsOfUser.find((permission)=>permission===per)//finding element wich = permission of full permissions array\n        if(permissionElement!==undefined){//if its finded:\n            const index = permissionsArray.findIndex((per)=>per===permissionElement)//we must to find its index in full array\n            boolArray[index]=true//its index in boolean array will be changed to true\n        }\n    }\n    return boolArray\n}\n\n\n// a function that check if any of the subscriptions releated permissions were pressed and retrun a bool accordingly\nconst subscriptionsPermissionsPressed = (arr) => {\n    let bool = false\n    const newArr = arr.slice(0, 4)\n    for (const element of newArr) {\n        if (element === true)\n            bool = true\n    }\n    return bool\n}\n\n// a function that check if any of the movies releated permissions were pressed and retrun a bool accordingly\nconst moviesPermissionsPressed = (arr) => {\n    let bool = false\n    const newArr = arr.slice(4, 8)\n    for (const element of newArr) {\n        if (element === true)\n            bool = true\n    }\n    return bool\n}\n\n//Converting of Boolean Array to string permissions:\nconst getPermissions = (boolarr) =>\n{\n    const permissionsArray = [\"View Subscriptions\",\"Create Subscriptions\",\"Delete Subscriptions\",\"Update Subscriptions\",\"View Movies\",\"Create Movies\",\"Delete Movies\",\"Update Movie\"]\n    const newArr=[]\n    let index = 0\n    for(let element of boolarr){\n        if(element)\n        {\n            newArr.push(permissionsArray[index])\n            index++\n        }\n    }\n    return newArr\n}\n\n\n\n\nexport {checkIfUserExist,findUserID,findUserByUserName,checkIfUsernameExist, checkIfPasswordExist, checkIfAdmin, getPermissionsArray, subscriptionsPermissionsPressed, moviesPermissionsPressed, getPermissions}"]},"metadata":{},"sourceType":"module"}