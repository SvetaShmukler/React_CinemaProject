{"ast":null,"code":"const {\n  getSubscriptionByID,\n  deleteSubscription,\n  getAllSubscriptions\n} = require(\"../DALs/Subscriptions_DAL\"); //Delete member's subscriptions by member's id:\n\n\nconst deleteSubscriptionById = async id => {\n  const sub = await getSubscriptionByID(id);\n\n  if (sub !== undefined) {\n    await deleteSubscription(sub._id);\n  }\n}; //Checking if a member has subscription:\n\n\nconst checkIfHasSubscription = async id => {\n  let boolean = false; //dont has subscription\n\n  const subscriptions = await getAllSubscriptions(); //all subscriptions from DB\n\n  for (let sub of subscriptions) {\n    if (sub.memberId === id) {\n      //checking if member with memberId has subscriptions\n      boolean = true;\n    }\n  }\n\n  return boolean;\n}; //Finding subscriptions by member id:\n\n\nconst getSubscriptionsByMemberId = async id => {\n  const subs = await getAllSubscriptions();\n  const subscription = subs.find(sub => sub.memberId === id);\n  return subscription;\n}; //Adding a movie to the subscription's movie array in the DB:\n\n\nconst AddMovieToSubscriptions = async (memberId, newMovie) => {\n  const subBool = await checkIfHasSubscription(memberId);\n\n  if (subBool) {\n    const sub = await getSubById(memberId);\n    let array = [...sub.movies, newMovie];\n    const newObj = { ...sub,\n      movies: array\n    };\n    await updateSubscriptionById(newObj, memberId);\n  } else {\n    const newSub = {\n      memberId: memberId,\n      movies: [newMovie]\n    };\n    await addSubscription(newSub);\n  }\n};\n\n_c = AddMovieToSubscriptions;\nexport { deleteSubscriptionById, checkIfHasSubscription, getSubscriptionsByMemberId };\n\nvar _c;\n\n$RefreshReg$(_c, \"AddMovieToSubscriptions\");","map":{"version":3,"sources":["/Users/Sveta/Documents/Full_stack/Final Project/React_Client/src/Utils/Subscriptions_Utils.js"],"names":["getSubscriptionByID","deleteSubscription","getAllSubscriptions","require","deleteSubscriptionById","id","sub","undefined","_id","checkIfHasSubscription","boolean","subscriptions","memberId","getSubscriptionsByMemberId","subs","subscription","find","AddMovieToSubscriptions","newMovie","subBool","getSubById","array","movies","newObj","updateSubscriptionById","newSub","addSubscription"],"mappings":"AAAA,MAAM;AAAEA,EAAAA,mBAAF;AAAuBC,EAAAA,kBAAvB;AAA2CC,EAAAA;AAA3C,IAAmEC,OAAO,CAAC,2BAAD,CAAhF,C,CAEA;;;AACA,MAAMC,sBAAsB,GAAG,MAAMC,EAAN,IAC/B;AACI,QAAMC,GAAG,GAAG,MAAMN,mBAAmB,CAACK,EAAD,CAArC;;AACA,MAAIC,GAAG,KAAIC,SAAX,EACA;AACI,UAAMN,kBAAkB,CAACK,GAAG,CAACE,GAAL,CAAxB;AACH;AACJ,CAPD,C,CASA;;;AACA,MAAMC,sBAAsB,GAAG,MAAMJ,EAAN,IAC/B;AACI,MAAIK,OAAO,GAAG,KAAd,CADJ,CACwB;;AACpB,QAAMC,aAAa,GAAG,MAAMT,mBAAmB,EAA/C,CAFJ,CAEqD;;AACjD,OAAI,IAAII,GAAR,IAAeK,aAAf,EAA6B;AACzB,QAAGL,GAAG,CAACM,QAAJ,KAAeP,EAAlB,EAAqB;AAAC;AAClBK,MAAAA,OAAO,GAAG,IAAV;AACH;AACJ;;AACD,SAAOA,OAAP;AACH,CAVD,C,CAWA;;;AACA,MAAMG,0BAA0B,GAAG,MAAMR,EAAN,IACnC;AACI,QAAMS,IAAI,GAAG,MAAMZ,mBAAmB,EAAtC;AACA,QAAMa,YAAY,GAAGD,IAAI,CAACE,IAAL,CAAWV,GAAD,IAAOA,GAAG,CAACM,QAAJ,KAAeP,EAAhC,CAArB;AACA,SAAOU,YAAP;AACH,CALD,C,CAOA;;;AACA,MAAME,uBAAuB,GAAG,OAAOL,QAAP,EAAiBM,QAAjB,KAA8B;AAC1D,QAAMC,OAAO,GAAG,MAAMV,sBAAsB,CAACG,QAAD,CAA5C;;AACA,MAAIO,OAAJ,EAAa;AACT,UAAMb,GAAG,GAAG,MAAMc,UAAU,CAACR,QAAD,CAA5B;AACA,QAAIS,KAAK,GAAG,CAAC,GAAGf,GAAG,CAACgB,MAAR,EAAgBJ,QAAhB,CAAZ;AACA,UAAMK,MAAM,GAAG,EAAE,GAAGjB,GAAL;AAAUgB,MAAAA,MAAM,EAAED;AAAlB,KAAf;AACA,UAAMG,sBAAsB,CAACD,MAAD,EAASX,QAAT,CAA5B;AACH,GALD,MAKO;AACH,UAAMa,MAAM,GAAG;AACXb,MAAAA,QAAQ,EAAEA,QADC;AAEXU,MAAAA,MAAM,EAAE,CAACJ,QAAD;AAFG,KAAf;AAIA,UAAMQ,eAAe,CAACD,MAAD,CAArB;AACH;AACJ,CAdD;;KAAMR,uB;AAgBN,SAAQb,sBAAR,EAA+BK,sBAA/B,EAAsDI,0BAAtD","sourcesContent":["const { getSubscriptionByID, deleteSubscription, getAllSubscriptions } = require(\"../DALs/Subscriptions_DAL\")\n\n//Delete member's subscriptions by member's id:\nconst deleteSubscriptionById = async(id) =>\n{\n    const sub = await getSubscriptionByID(id)\n    if (sub !==undefined)\n    {\n        await deleteSubscription(sub._id)\n    }\n}\n\n//Checking if a member has subscription:\nconst checkIfHasSubscription = async(id) =>\n{\n    let boolean = false //dont has subscription\n    const subscriptions = await getAllSubscriptions()//all subscriptions from DB\n    for(let sub of subscriptions){\n        if(sub.memberId===id){//checking if member with memberId has subscriptions\n            boolean = true\n        }\n    }\n    return boolean\n}\n//Finding subscriptions by member id:\nconst getSubscriptionsByMemberId = async(id)=>\n{\n    const subs = await getAllSubscriptions()\n    const subscription = subs.find((sub)=>sub.memberId===id)\n    return subscription\n}\n\n//Adding a movie to the subscription's movie array in the DB:\nconst AddMovieToSubscriptions = async (memberId, newMovie) => {\n    const subBool = await checkIfHasSubscription(memberId)\n    if (subBool) {\n        const sub = await getSubById(memberId)\n        let array = [...sub.movies, newMovie]\n        const newObj = { ...sub, movies: array }\n        await updateSubscriptionById(newObj, memberId)\n    } else {\n        const newSub = {\n            memberId: memberId,\n            movies: [newMovie]\n        }\n        await addSubscription(newSub)\n    }\n}\n\nexport {deleteSubscriptionById,checkIfHasSubscription,getSubscriptionsByMemberId}"]},"metadata":{},"sourceType":"module"}